<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wuliviki&#39;s world</title>
  
  <subtitle>chat with me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://williamywh.github.io/"/>
  <updated>2018-03-25T11:47:02.449Z</updated>
  <id>http://williamywh.github.io/</id>
  
  <author>
    <name>尹文辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java源码浅析Hashtable</title>
    <link href="http://williamywh.github.io/2018/03/25/hashtable/"/>
    <id>http://williamywh.github.io/2018/03/25/hashtable/</id>
    <published>2018-03-25T11:44:36.000Z</published>
    <updated>2018-03-25T11:47:02.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java源码浅析Hashtable"><a href="#Java源码浅析Hashtable" class="headerlink" title="Java源码浅析Hashtable"></a>Java源码浅析Hashtable</h1><hr><h2 id="Hashtable初始"><a href="#Hashtable初始" class="headerlink" title="Hashtable初始"></a>Hashtable初始</h2><p>在官网API中是这样描述Hashtable的：</p><table><thead><tr><th>Class</th><th style="text-align:right">Description</th></tr></thead><tbody><tr><td>Hashtable<k,v></k,v></td><td style="text-align:right">This class implements a hash table, which maps keys to values.（这个类实现了一个哈希表，它将键映射到值。）</td></tr></tbody></table><p>源码中出现过较为重要的参数：</p><table><thead><tr><th>变量</th><th style="text-align:right">术语</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>count</td><td style="text-align:right">entry数量</td><td style="text-align:center">The total number of entries in the hash table.</td></tr><tr><td>threshold</td><td style="text-align:right">rehash阈值</td><td style="text-align:center">The table is rehashed when its size exceeds this threshold.  (The <em> value of this field is (int)(capacity </em> loadFactor).)</td></tr><tr><td>loadFactor</td><td style="text-align:right">装填因子</td><td style="text-align:center">The load factor for the hashtable</td></tr></tbody></table><p>Hashtable的声明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public class Hashtable&lt;K,V&gt;</div><div class="line">    extends Dictionary&lt;K,V&gt;</div><div class="line">    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable</div></pre></td></tr></table></figure></p><p>从声明中可以知道，Hashtable也是以键值对的形式进行存储，Hashtable继承了Dictionary（这个和HashMap不一样），同时继承了Map<k,v>。在源码中不难看出来，Hashtable中大部分函数前面都包含了synchronized关键之修饰，实现了同步机制，由此可以知道Hashtable是线程安全的（HashMap没有synchronized关键字修饰）</k,v></p><h3 id="Hashtable构造函数"><a href="#Hashtable构造函数" class="headerlink" title="Hashtable构造函数"></a>Hashtable构造函数</h3><p>和HashMap一样，有4个构造函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public Hashtable(int initialCapacity, <span class="built_in">float</span> loadFactor) &#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; 0)</div><div class="line">            throw new IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</div><div class="line">            throw new IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (initialCapacity==0)</div><div class="line">            initialCapacity = 1;</div><div class="line">        this.loadFactor = loadFactor;</div><div class="line">        table = new Entry&lt;?,?&gt;[initialCapacity];</div><div class="line">        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);</div><div class="line">    &#125;</div><div class="line">    public Hashtable(int initialCapacity) &#123;</div><div class="line">        this(initialCapacity, 0.75f);</div><div class="line">    &#125;</div><div class="line">    public <span class="function"><span class="title">Hashtable</span></span>() &#123;</div><div class="line">        this(11, 0.75f);</div><div class="line">    &#125;</div><div class="line">    public Hashtable(Map&lt;? extends K, ? extends V&gt; t) &#123;</div><div class="line">        this(Math.max(2*t.size(), 11), 0.75f);</div><div class="line">        putAll(t);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这个和HashMap差不多，构造函数初始化数组槽大小以及负载因子。</p><h3 id="Hashtable键值对-Entry"><a href="#Hashtable键值对-Entry" class="headerlink" title="Hashtable键值对/Entry"></a>Hashtable键值对/Entry</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">private static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final int <span class="built_in">hash</span>;</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line"></div><div class="line">        protected Entry(int <span class="built_in">hash</span>, K key, V value, Entry&lt;K,V&gt; next) &#123;</div><div class="line">            this.hash = <span class="built_in">hash</span>;</div><div class="line">            this.key =  key;</div><div class="line">            this.value = value;</div><div class="line">            this.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">        protected Object <span class="function"><span class="title">clone</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> new Entry&lt;&gt;(<span class="built_in">hash</span>, key, value,</div><div class="line">                                  (next==null ? null : (Entry&lt;K,V&gt;) next.clone()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Map.Entry Ops</div><div class="line"></div><div class="line">        public K <span class="function"><span class="title">getKey</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public V <span class="function"><span class="title">getValue</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public V setValue(V value) &#123;</div><div class="line">            <span class="keyword">if</span> (value == null)</div><div class="line">                throw new NullPointerException();</div><div class="line"></div><div class="line">            V oldValue = this.value;</div><div class="line">            this.value = value;</div><div class="line">            <span class="built_in">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean equals(Object o) &#123;</div><div class="line">            <span class="keyword">if</span> (!(o instanceof Map.Entry))</div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line"></div><div class="line">            <span class="built_in">return</span> (key==null ? e.getKey()==null : key.equals(e.getKey())) &amp;&amp;</div><div class="line">               (value==null ? e.getValue()==null : value.equals(e.getValue()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int <span class="function"><span class="title">hashCode</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> <span class="built_in">hash</span> ^ Objects.hashCode(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> key.toString()+<span class="string">"="</span>+value.toString();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这个和HashMap是一样的，数组槽节点含有hashCode和equals函数，意味着如果新建Hashtable想用自定义的可变对象作为Key的话也必须重写这2个函数。（这个数组槽节点和HashMap数据结构的类型貌似不一样，HashMap使用Node&lt; K,V&gt;，Hashtable使用Entry&lt; K,V&gt;，除了HashMap的Node&lt; K,V&gt;没有实现clone函数外暂时没发现2者的区别在哪里qwq）</p><h3 id="Hashtable的get函数"><a href="#Hashtable的get函数" class="headerlink" title="Hashtable的get函数"></a>Hashtable的get函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">    public synchronized V get(Object key) &#123;</div><div class="line">        Entry&lt;?,?&gt; tab[] = table;</div><div class="line">        int <span class="built_in">hash</span> = key.hashCode();</div><div class="line">        int index = (<span class="built_in">hash</span> &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != null ; e = e.next) &#123;</div><div class="line">            <span class="keyword">if</span> ((e.hash == <span class="built_in">hash</span>) &amp;&amp; e.key.equals(key)) &#123;</div><div class="line">                <span class="built_in">return</span> (V)e.value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>4:表示用Hashtable的key值调用hashCode（）计算hashCode的值<br>5：index表示的是数组槽中的桶的位置（本质是键值对在tab数组中的索引）采用除数取余法进行散列分布，模运算效率较低。对比一下，前面说的HashMap的数组槽的桶位置是怎么算的呢<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static final int <span class="built_in">hash</span>(Object key) &#123;</div><div class="line">        int h;</div><div class="line">        <span class="built_in">return</span> (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>Java的位移运算比取模运算快太多了，这就是一小部分网上说为啥HashMap的速度比Hashtable快的原因之一了。<br>6/7：在链表中找到key对应的值。这说明了HashMap和Hashtable的节点存储结构其实不完全一样的。结合前面说的，HashMap采用的类似数组+链表+红黑树进行存储，在链表大于一定量的时候将链表转换成红黑树，提高访问速度；而Hashtable仅仅采用数组+链表的存储结构，这速度理所当然比不上HashMap啦。</p><h3 id="Hashtable的put方法"><a href="#Hashtable的put方法" class="headerlink" title="Hashtable的put方法"></a>Hashtable的put方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public synchronized V put(K key, V value) &#123;</div><div class="line">        // Make sure the value is not null</div><div class="line">        <span class="keyword">if</span> (value == null) &#123;</div><div class="line">            throw new NullPointerException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Makes sure the key is not already <span class="keyword">in</span> the hashtable.</div><div class="line">        Entry&lt;?,?&gt; tab[] = table;</div><div class="line">        int <span class="built_in">hash</span> = key.hashCode();</div><div class="line">        int index = (<span class="built_in">hash</span> &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class="line">        <span class="keyword">for</span>(; entry != null ; entry = entry.next) &#123;</div><div class="line">            <span class="keyword">if</span> ((entry.hash == <span class="built_in">hash</span>) &amp;&amp; entry.key.equals(key)) &#123;</div><div class="line">                V old = entry.value;</div><div class="line">                entry.value = value;</div><div class="line">                <span class="built_in">return</span> old;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        addEntry(<span class="built_in">hash</span>, key, value, index);</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>3位置和9位置：如果key或者value为Null的话，这2处地方就会抛出NullPointerException的错误，这就说明Hashtable是不允许key和value为Null的。然而HashMap则运行为Null的，这2个存在区别。<br>14/15/16：如果Hashtable含有key，设置(key, oldValue) -&gt; (key, newValue)；<br>21：如果Hashtable不含有key, 调用addEntry(…)添加新的键值对；</p><h3 id="Hashtable的addEntry方法"><a href="#Hashtable的addEntry方法" class="headerlink" title="Hashtable的addEntry方法"></a>Hashtable的addEntry方法</h3><p>当put的时候不含key的时候，就会调用addEntry函数进行增添新的函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void addEntry(int <span class="built_in">hash</span>, K key, V value, int index) &#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        Entry&lt;?,?&gt; tab[] = table;</div><div class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</div><div class="line">            // Rehash the table <span class="keyword">if</span> the threshold is exceeded</div><div class="line">            <span class="built_in">rehash</span>();</div><div class="line"></div><div class="line">            tab = table;</div><div class="line">            <span class="built_in">hash</span> = key.hashCode();</div><div class="line">            index = (<span class="built_in">hash</span> &amp; 0x7FFFFFFF) % tab.length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Creates the new entry.</div><div class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</div><div class="line">        tab[index] = new Entry&lt;&gt;(<span class="built_in">hash</span>, key, value, e);</div><div class="line">        count++;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>5/7:如果超出阈值，则调用rehash函数重新筛查表格<br>17：链接新的结点，新结点的next域指向旧结点，也就是新的结点是链表表头</p><h3 id="Hashtable的rehash函数"><a href="#Hashtable的rehash函数" class="headerlink" title="Hashtable的rehash函数"></a>Hashtable的rehash函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">    protected void <span class="function"><span class="title">rehash</span></span>() &#123;</div><div class="line">        int oldCapacity = table.length;</div><div class="line">        Entry&lt;?,?&gt;[] oldMap = table;</div><div class="line"></div><div class="line">        // overflow-conscious code</div><div class="line">        int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</div><div class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0) &#123;</div><div class="line">            <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</div><div class="line">                // Keep running with MAX_ARRAY_SIZE buckets</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            newCapacity = MAX_ARRAY_SIZE;</div><div class="line">        &#125;</div><div class="line">        Entry&lt;?,?&gt;[] newMap = new Entry&lt;?,?&gt;[newCapacity];</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        threshold = (int)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1);</div><div class="line">        table = newMap;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (int i = oldCapacity ; i-- &gt; 0 ;) &#123;</div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != null ; ) &#123;</div><div class="line">                Entry&lt;K,V&gt; e = old;</div><div class="line">                old = old.next;</div><div class="line"></div><div class="line">                int index = (e.hash &amp; 0x7FFFFFFF) % newCapacity;</div><div class="line">                e.next = (Entry&lt;K,V&gt;)newMap[index];</div><div class="line">                newMap[index] = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>7：新的容量 = 旧的容量 * 2 + 1<br>17：根据新的容量计算阈值<br>21：拷贝每个Entry链表<br>25：根据新的容量重新计算索引的位置<br>26：开辟新的链表节点<br>27：拷贝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java源码浅析Hashtable&quot;&gt;&lt;a href=&quot;#Java源码浅析Hashtable&quot; class=&quot;headerlink&quot; title=&quot;Java源码浅析Hashtable&quot;&gt;&lt;/a&gt;Java源码浅析Hashtable&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://williamywh.github.io/categories/Java/"/>
    
    
      <category term="&lt;font size=6&gt;hashtable&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-hashtable-font/"/>
    
  </entry>
  
  <entry>
    <title>Java源码剖析HashMap</title>
    <link href="http://williamywh.github.io/2018/03/23/hashmap/"/>
    <id>http://williamywh.github.io/2018/03/23/hashmap/</id>
    <published>2018-03-23T09:00:23.000Z</published>
    <updated>2018-03-23T10:25:29.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java源码剖析HashMap"><a href="#Java源码剖析HashMap" class="headerlink" title="Java源码剖析HashMap"></a>Java源码剖析HashMap</h1><hr><p>在Eclipse这个IDE中，一般阅读源码的方式就是鼠标点击对象的同时，按住ctrl键就可以阅读到你想要的源码了，如果按照以上方式进行时，遇到Attach Source的缘故无法看到源码，不妨试一下下面的方式。</p><blockquote><ul><li>菜单栏Window -&gt; Preferences -&gt; 左边选项的Java -&gt; Installed JREs</li><li>右边会出现l列表窗体，选择IDE Install JREs 后点击Edit</li><li>在JRE system libraries中有一个名为rt.jar的包（rt.jar包含了jdk的基础类库，就是基类的class文件）</li><li>展开后可以看见Source attachment：（None）选项，点右边的按钮“Source Attachment”, 选择你的JDK目录下的 “src.zip”文件，然后大功告成。</li></ul></blockquote><hr><h2 id="HashMap初识"><a href="#HashMap初识" class="headerlink" title="HashMap初识"></a>HashMap初识</h2><p>在官网API中是这样描述hashMap：</p><table><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td>HashMap<k,v></k,v></td><td>基于哈希表的Map接口实现。</td></tr></tbody></table><p>与之相关的接口：</p><table><thead><tr><th>Interfaces</th><th>Description</th></tr></thead><tbody><tr><td>Map<k,v></k,v></td><td>将键映射到值的对象。</td></tr><tr><td>Map.Entry<k,v></k,v></td><td>一个映射条目（键值对）。</td></tr></tbody></table><p>源码中出现比较重要的参数：</p><table><thead><tr><th>变量</th><th style="text-align:right">术语</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>size</td><td style="text-align:right">大小</td><td style="text-align:center">The number of key-value mappings contained in this map.（HashMap的存储大小）</td></tr><tr><td>loadFactor</td><td style="text-align:right">负载因子</td><td style="text-align:center">The load factor for the hash table.（HashMap大小负载因子，默认为0.75f）</td></tr><tr><td>threshold</td><td style="text-align:right">临界值</td><td style="text-align:center">The next size value at which to resize (capacity * load factor).（HashMap大小达到临界值，需要重新分配大小。）</td></tr></tbody></table><p>在源码的开头就直接看见HashMap<k，v>类的定义：基于哈希表的Map接口实现。 该实现提供了所有可选的映射操作，并允许使用空值和空键。 （HashMap类大致等同于Hashtable ，除了它是不同步的并且允许为空值。）这个类不能保证地图的顺序; 特别是，它不能保证订单会随着时间的推移保持不变。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable</div></pre></td></tr></table></figure></k，v></p><p>大概就知道它所有实现的接口：可串行化 ，可复制 ， 映射 <k，v>，可能类会实现接口的方法或者override父类的方法。</k，v></p><h3 id="HashMap的构造函数"><a href="#HashMap的构造函数" class="headerlink" title="HashMap的构造函数"></a>HashMap的构造函数</h3><p>粗略地数了一下，大概有4个构造函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public HashMap(int initialCapacity, <span class="built_in">float</span> loadFactor) &#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; 0)</div><div class="line">            throw new IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY; // MAXIMUM_CAPACITY=1&lt;&lt;30 </div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</div><div class="line">            throw new IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line">        this.loadFactor = loadFactor;</div><div class="line">        this.threshold = tableSizeFor(initialCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public HashMap(int initialCapacity) &#123;</div><div class="line">        this(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public <span class="function"><span class="title">HashMap</span></span>() &#123;</div><div class="line">        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</div><div class="line">        this.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        putMapEntries(m, <span class="literal">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>大致hashmap一般都是通过构造函数来计算得到相应的容量、加载因子、临界值等变量，没有传参则默认为类刚开始声明的常量值。</p><h3 id="hashmap的put-putVal函数："><a href="#hashmap的put-putVal函数：" class="headerlink" title="hashmap的put/putVal函数："></a>hashmap的put/putVal函数：</h3><p>先了解一下hashmap的存储结构：<br><img src="https://i.loli.net/2018/03/23/5ab4adca6ce3a.png" alt="查看hashmap结构图"><br>通过图大概可以知道hashmap底层是哈希数组，在jdk1.6以前，用entry来描述键值对，1.8版本后改成node。通过key来调用hash（）函数计算哈希值，桶中可以位链表或者红黑树。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">        <span class="built_in">return</span> putVal(<span class="built_in">hash</span>(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>2：通过key来计算hash值，再次调用putVal函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">final V putVal(int <span class="built_in">hash</span>, K key, V value, boolean onlyIfAbsent,</div><div class="line">                   boolean evict) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class="line">        <span class="keyword">if</span> ((tab = table) == null || (n = tab.length) == 0)</div><div class="line">            n = (tab = resize()).length;</div><div class="line">        <span class="keyword">if</span> ((p = tab[i = (n - 1) &amp; <span class="built_in">hash</span>]) == null)</div><div class="line">            tab[i] = newNode(<span class="built_in">hash</span>, key, value, null);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;K,V&gt; e; K k;</div><div class="line">            <span class="keyword">if</span> (p.hash == <span class="built_in">hash</span> &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                e = p;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p instanceof TreeNode)</div><div class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, <span class="built_in">hash</span>, key, value);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (int binCount = 0; ; ++binCount) &#123;</div><div class="line">                    <span class="keyword">if</span> ((e = p.next) == null) &#123;</div><div class="line">                        p.next = newNode(<span class="built_in">hash</span>, key, value, null);</div><div class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 <span class="keyword">for</span> 1st</div><div class="line">                            treeifyBin(tab, <span class="built_in">hash</span>);</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="built_in">break</span>;</div><div class="line">                    p = e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (e != null) &#123; // existing mapping <span class="keyword">for</span> key</div><div class="line">                V oldValue = e.value;</div><div class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == null)</div><div class="line">                    e.value = value;</div><div class="line">                afterNodeAccess(e);</div><div class="line">                <span class="built_in">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ++modCount;</div><div class="line">        <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">            resize();</div><div class="line">        afterNodeInsertion(evict);</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>4、判断table为空，没有初始化调用resize（）函数分配空间<br>6/7：通过hash来判断table的相应位置是否为空bucket（桶），为空桶则创建一个新的键值节点放在这个table中<br>10/11：如果桶中的元素不存在该键值对则在桶中添加结点<br>13：桶为红黑树结构，则调用putTreeVal函数按照红黑树的结构进行插入<br>15：桶为链表，则遍历链表在尾部插入<br>19：检查链表的长度是否大于TREEIFY_THRESHOLD - 1，true则链表转换成红黑树。由此可以知道链表桶的长度极限为8.<br>29：找到key以及hash（key）相同的键值对进行替换操作<br>38：键值对的大小超过阈值，则重新分配空间。</p><h3 id="3-hashmap的get-getNode函数："><a href="#3-hashmap的get-getNode函数：" class="headerlink" title="3. hashmap的get/getNode函数："></a>3. hashmap的get/getNode函数：</h3><p>在知道hashmap是如何进行put操作的情况下进行get类函数的剖析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public V get(Object key) &#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="built_in">return</span> (e = getNode(<span class="built_in">hash</span>(key), key)) == null ? null : e.value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>3：通过调用getNode函数进行获取结点，不存在则默认值为Null</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">final Node&lt;K,V&gt; getNode(int <span class="built_in">hash</span>, Object key) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class="line">        <span class="keyword">if</span> ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class="line">            (first = tab[(n - 1) &amp; <span class="built_in">hash</span>]) != null) &#123;</div><div class="line">            <span class="keyword">if</span> (first.hash == <span class="built_in">hash</span> &amp;&amp; // always check first node</div><div class="line">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                <span class="built_in">return</span> first;</div><div class="line">            <span class="keyword">if</span> ((e = first.next) != null) &#123;</div><div class="line">                <span class="keyword">if</span> (first instanceof TreeNode)</div><div class="line">                    <span class="built_in">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(<span class="built_in">hash</span>, key);</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (e.hash == <span class="built_in">hash</span> &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="built_in">return</span> e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != null);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>5/6/7:通过hash找到table的槽位，判断第一个结点的key值是否相等，相等则直接返回node。<br>9：key不相同，并且桶的组织形式为红黑树，则按照红黑树的方法进行查找<br>11、key不相同，并且桶的组织形式为链表，则按照链表的方法进行查找<br>18：以上都不是，则返回null。</p><h3 id="hashmap的resize函数："><a href="#hashmap的resize函数：" class="headerlink" title="hashmap的resize函数："></a>hashmap的resize函数：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">final Node&lt;K,V&gt;[] <span class="function"><span class="title">resize</span></span>() &#123;</div><div class="line">        Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">        int oldCap = (oldTab == null) ? 0 : oldTab.length;</div><div class="line">        int oldThr = threshold;</div><div class="line">        int newCap, newThr = 0;</div><div class="line">        <span class="keyword">if</span> (oldCap &gt; 0) &#123;</div><div class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">                threshold = Integer.MAX_VALUE;</div><div class="line">                <span class="built_in">return</span> oldTab;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">                newThr = oldThr &lt;&lt; 1; // double threshold</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; 0) // initial capacity was placed <span class="keyword">in</span> threshold</div><div class="line">            newCap = oldThr;</div><div class="line">        <span class="keyword">else</span> &#123;               // zero initial threshold signifies using defaults</div><div class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newThr == 0) &#123;</div><div class="line">            <span class="built_in">float</span> ft = (<span class="built_in">float</span>)newCap * loadFactor;</div><div class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="built_in">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                      (int)ft : Integer.MAX_VALUE);</div><div class="line">        &#125;</div><div class="line">        threshold = newThr;</div><div class="line">        @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</div><div class="line">        table = newTab;</div><div class="line">        <span class="keyword">if</span> (oldTab != null) &#123;</div><div class="line">            <span class="keyword">for</span> (int j = 0; j &lt; oldCap; ++j) &#123;</div><div class="line">                Node&lt;K,V&gt; e;</div><div class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != null) &#123;</div><div class="line">                    oldTab[j] = null;</div><div class="line">                    <span class="keyword">if</span> (e.next == null)</div><div class="line">                        newTab[e.hash &amp; (newCap - 1)] = e;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof TreeNode)</div><div class="line">                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</div><div class="line">                    <span class="keyword">else</span> &#123; // preserve order</div><div class="line">                        Node&lt;K,V&gt; loHead = null, loTail = null;</div><div class="line">                        Node&lt;K,V&gt; hiHead = null, hiTail = null;</div><div class="line">                        Node&lt;K,V&gt; next;</div><div class="line">                        <span class="keyword">do</span> &#123;</div><div class="line">                            next = e.next;</div><div class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == 0) &#123;</div><div class="line">                                <span class="keyword">if</span> (loTail == null)</div><div class="line">                                    loHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    loTail.next = e;</div><div class="line">                                loTail = e;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (hiTail == null)</div><div class="line">                                    hiHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hiTail.next = e;</div><div class="line">                                hiTail = e;</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">while</span> ((e = next) != null);</div><div class="line">                        <span class="keyword">if</span> (loTail != null) &#123;</div><div class="line">                            loTail.next = null;</div><div class="line">                            newTab[j] = loHead;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (hiTail != null) &#123;</div><div class="line">                            hiTail.next = null;</div><div class="line">                            newTab[j + oldCap] = hiHead;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> newTab;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>通过put函数可以知道，假如size不能满足的时候就会进行resize（）处理。<br>7：旧的链表超过最大容量，则更新阈值为0x7fffffff<br>11：或者新的容量增大为旧容量的2倍，通过二进制左移实现<br>37：红黑树桶进行rehash操作<br>39：链表桶进行rehash操作</p><h3 id="hashmap性能分析："><a href="#hashmap性能分析：" class="headerlink" title="hashmap性能分析："></a>hashmap性能分析：</h3><ul><li>hashmap 的值get都是通过key来计算hashcode值后进行查找，假如说hashcode相等的概率大一些，也就发生了碰撞，也就需要通过红黑树桶或者遍历链表桶来进行查找元素，都知道链表查找元素与数组有区别，这样也就造成性能消耗。（hashmap的数组初始化大小都是2的次方大小时，hashmap 的效率最高，碰撞的概率比较低）</li><li>当hashmap元素越来越多的情况下，碰撞的概率也增大，甚至可能需要进行resize操作，原数组中的数据必须重新计算其在新数组中的位置，并放进去。当hashmap中的元素个数超过数组大小*loadFactor（0.75f）时，进行扩容，按照这个思路，假如说可以预知hashmap的大小的时候，可以有效设定size值，达到节省空间以及避免resize的操作。</li></ul><h3 id="hashmap的key相关问题"><a href="#hashmap的key相关问题" class="headerlink" title="hashmap的key相关问题"></a>hashmap的key相关问题</h3><p>一般我们使用hashmap习惯利用String作为key，那自定义的类是否也可以作为key。<br>网上有一个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Student&#123;  </div><div class="line">    private String name;  </div><div class="line">    private String sex;   </div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;  </div><div class="line">        <span class="built_in">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">    public void setName(String name) &#123;  </div><div class="line">        this.name = name;  </div><div class="line">    &#125;  </div><div class="line">    public String <span class="function"><span class="title">getSex</span></span>() &#123;  </div><div class="line">        <span class="built_in">return</span> sex;  </div><div class="line">    &#125;  </div><div class="line">    public void setSex(String sex) &#123;  </div><div class="line">        this.sex = sex;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;  </div><div class="line">        // TODO 自动生成的方法存根  </div><div class="line">    HashMap&lt;Student,String&gt; map = new HashMap&lt;Student,String&gt;();  </div><div class="line">        Student s1 = new Student();  </div><div class="line">        s1.setName(<span class="string">"一号"</span>);  </div><div class="line">        s1.setSex(<span class="string">"男"</span>);  </div><div class="line">        Student s2 = new Student();  </div><div class="line">        s2.setName(<span class="string">"二号"</span>);  </div><div class="line">        s2.setSex(<span class="string">"女"</span>);  </div><div class="line">        map.put(s1, <span class="string">"111"</span>);  </div><div class="line">        map.put(s2, <span class="string">"222"</span>);  </div><div class="line">        Iterator iter = map.entrySet().iterator();</div><div class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">        Map.Entry entry = (Map.Entry) iter.next();</div><div class="line">        Object key = entry.getKey();</div><div class="line">        Object val = entry.getValue();</div><div class="line">        System.out.println(val);</div><div class="line">        &#125; </div><div class="line">        System.out.println(map.get(s1)); //试了试单独根据key获取值  </div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>output:111<br>222<br>111<br>这个output是没有问题的。<br>然后又创建一个Student对象：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Student s4 = new Student();</div><div class="line">        s4.setName(<span class="string">"二号"</span>);</div><div class="line">        s4.setSex(<span class="string">"女"</span>);</div><div class="line">        System.out.println(map.get(s4));</div></pre></td></tr></table></figure></p><p>这个对象的属性和s2完全一样，但值得注意的是，他们2个其实是属于不同对象，因为他们2个分配的不是同一块内存区域，仅仅是对象包含的2个属性值相同而已。先来看看hashmap的节点对象源代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class="line">        final int <span class="built_in">hash</span>;</div><div class="line">        final K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next;</div><div class="line"></div><div class="line">        Node(int <span class="built_in">hash</span>, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">            this.hash = <span class="built_in">hash</span>;</div><div class="line">            this.key = key;</div><div class="line">            this.value = value;</div><div class="line">            this.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public final K <span class="function"><span class="title">getKey</span></span>()        &#123; <span class="built_in">return</span> key; &#125;</div><div class="line">        public final V <span class="function"><span class="title">getValue</span></span>()      &#123; <span class="built_in">return</span> value; &#125;</div><div class="line">        public final String <span class="function"><span class="title">toString</span></span>() &#123; <span class="built_in">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">        public final int <span class="function"><span class="title">hashCode</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public final V setValue(V newValue) &#123;</div><div class="line">            V oldValue = value;</div><div class="line">            value = newValue;</div><div class="line">            <span class="built_in">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public final boolean equals(Object o) &#123;</div><div class="line">            <span class="keyword">if</span> (o == this)</div><div class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (o instanceof Map.Entry) &#123;</div><div class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                    Objects.equals(value, e.getValue()))</div><div class="line">                    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>可以得知node是通过hashcode和equals函数来进行判断是否存在或者属于同一个结点，那么就可以选择在Student类中重写这2个方法来解决这个问题。来达到可变对象的预定属性值相同，那么他们的hashCode值也相同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">    public int <span class="function"><span class="title">hashCode</span></span>() &#123;  </div><div class="line">        final int prime = 31;  </div><div class="line">        int result = 1;  </div><div class="line">        result = prime * result + ((name == null) ? 0 : name.hashCode());  </div><div class="line">        result = prime * result + ((sex == null) ? 0 : sex.hashCode());  </div><div class="line">        <span class="built_in">return</span> result;  </div><div class="line">    &#125;  </div><div class="line">    @Override  </div><div class="line">    public boolean equals(Object obj) &#123;  </div><div class="line">        <span class="keyword">if</span> (this == obj)  </div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">        <span class="keyword">if</span> (obj == null)  </div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())  </div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        Student other = (Student) obj;  </div><div class="line">        <span class="keyword">if</span> (name == null) &#123;  </div><div class="line">            <span class="keyword">if</span> (other.name != null)  </div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))  </div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        <span class="keyword">if</span> (sex == null) &#123;  </div><div class="line">            <span class="keyword">if</span> (other.sex != null)  </div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sex.equals(other.sex))  </div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java源码剖析HashMap&quot;&gt;&lt;a href=&quot;#Java源码剖析HashMap&quot; class=&quot;headerlink&quot; title=&quot;Java源码剖析HashMap&quot;&gt;&lt;/a&gt;Java源码剖析HashMap&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;在Eclipse这个IDE
      
    
    </summary>
    
      <category term="Java" scheme="http://williamywh.github.io/categories/Java/"/>
    
    
      <category term="&lt;font size=6&gt;hashmap&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-hashmap-font/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫(一)</title>
    <link href="http://williamywh.github.io/2018/02/24/crawl-1/"/>
    <id>http://williamywh.github.io/2018/02/24/crawl-1/</id>
    <published>2018-02-24T09:41:19.000Z</published>
    <updated>2018-02-24T10:00:10.530Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/02/24/5a9113702032c.png" alt=""></p><h1 id="Python爬虫导言"><a href="#Python爬虫导言" class="headerlink" title="Python爬虫导言"></a>Python爬虫导言</h1><p>爬虫一般是使用者通过某种途径爬取目标站点所需要的数据。这种途径包括站点本身的sitemap、网站提供的API、当然也包括自己编写的小蜘蛛。</p><h2 id="爬取前有必要了解的一些东西"><a href="#爬取前有必要了解的一些东西" class="headerlink" title="爬取前有必要了解的一些东西"></a>爬取前有必要了解的一些东西</h2><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p>这是一个文件，里面给出了爬虫爬取该网站时应该遵守的一些规定，来约束爬虫的行为，当然在后面自然有办法违背robots.txt文件，但同时也要承担爬虫被封甚至ip封禁的风险。<br><a href="www.robotstxt.org">robots.txt参考文件</a></p><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>sitemap文件里面包含网站最新的内容，通过这个东西可以爬取我们需要的内容而不需要访问每一个网页。但是它也存在内容缺少不完整等问题（例如本博客的sitemap就傻了（捂脸））<br><a href="www.sitemaps.org/protocol.html">取网站地图标准的定义</a></p><h3 id="builtwith模块"><a href="#builtwith模块" class="headerlink" title="builtwith模块"></a>builtwith模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">builtwith.parse(<span class="string">'url'</span>)</div></pre></td></tr></table></figure><p>通过这个模板可以分析这个网站构建所使用的部分类型，从而可以确定爬取的大致方向</p><h3 id="WHOIS"><a href="#WHOIS" class="headerlink" title="WHOIS"></a>WHOIS</h3><p>通过whois协议可以查找出域名注册者是谁。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whois.whois(<span class="string">'域名'</span>)</div></pre></td></tr></table></figure></p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>谷歌百度估计都不陌生，讲道理搜索引擎我们真的用对方向了？谈谈搜索黑魔法<br>比如说，爬取前你想估算目标站点究竟有多大，来决定究竟使用多线程任务还是单线程串行爬、使用框架还是原生态等等。<br>善于利用搜索引擎的就会<strong><em>site:url</em></strong>  然后谷歌百度就会在左上角About xxx results（xxx second），并且这个量一般只会多不会少。</p><p><strong><em><a href="www.google.com/advanced_search">谷歌其他高级搜索参数用法</a></em></strong></p><p><strong><em><a href="www.baidu.com/gaoji/advanced.html">百度高级搜索参数可视化搜索</a></em></strong></p><p>搜索常用的关键词：</p><ul><li><code>example</code> #用例</li><li><code>tutorial</code> #教程</li><li><code>doc</code> #文档</li><li><code>awesome</code> #集合</li><li><code>github</code> #最大开源平台</li><li><code>stackoverflow</code> #码农版知乎</li></ul><p>比如说，你想看看python有什么很棒的开源项目，可以选择这样搜索，python awesome github，当然也可以直接到github上面搜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/02/24/5a9113702032c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Python爬虫导言&quot;&gt;&lt;a href=&quot;#Python爬虫导言&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Python3" scheme="http://williamywh.github.io/categories/Python3/"/>
    
    
      <category term="&lt;font size=6&gt;爬虫&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-%E7%88%AC%E8%99%AB-font/"/>
    
  </entry>
  
  <entry>
    <title>Java 8新特性（三）</title>
    <link href="http://williamywh.github.io/2017/11/07/J8-2/"/>
    <id>http://williamywh.github.io/2017/11/07/J8-2/</id>
    <published>2017-11-07T07:49:06.000Z</published>
    <updated>2017-11-07T14:43:06.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天看到一条较为劲爆的信息:Kotlin/Native支持IOS和Web开发。emmm，Kotlin要一统天下？还是先喝口水冷静一下吧。</p></blockquote><h1 id="Java-8新特性（三"><a href="#Java-8新特性（三" class="headerlink" title="Java 8新特性（三)"></a>Java 8新特性（三)</h1><p>这章主要谈J8的Stream（流式操作）。</p><h2 id="Stream是什么？"><a href="#Stream是什么？" class="headerlink" title="Stream是什么？"></a>Stream是什么？</h2><p>J8中，stream操作主要是对collection集合数据的操作。它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。<br>（官方的翻译总是文绉绉的，看起来头大）<br>反正就是类似一个类的数据，你需要特定属性对象进行某项属性的处理（升降序、最大最小、平均之类的），通过处理后（所谓的“聚合操作”），再在处理后的数据里面取出类的某些属性进另外一个集合里面。<br>在J7，大家应该比较普遍的就是使用Iterator（迭代器）来遍历集合，处理数据，然后在取属性，可能用这种方法代码量15行，但是stream可能只是1-5行，而且stream并行的流可以很大程度上提高程序的执行效率</p><h2 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h2><p>Stream 的使用就是获得一个stream对象,实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。<br>在Java 8 中，集合的接口有两个方法来产生流：</p><ul><li><font color="red">stream()</font>：该方法返回一个将集合视为源的连续流。</li><li><font color="red">parallelStream()</font>：该方法返回一个将集合视为源的并行流。<br><img src="http://simage.jdon.com/idea/stream.png" alt="图示1"></li></ul><h3 id="流的构造与转换"><a href="#流的构造与转换" class="headerlink" title="流的构造与转换"></a>流的构造与转换</h3><h4 id="构造流的几种常见方法"><a href="#构造流的几种常见方法" class="headerlink" title="构造流的几种常见方法"></a>构造流的几种常见方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.Stream stream = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">2.String [] strArray = new String[] &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</div><div class="line">  stream = Stream.of(strArray);</div><div class="line">  stream = Arrays.stream(strArray);</div><div class="line">3.List&lt;String&gt; list = Arrays.asList(strArray);</div><div class="line">  stream = list.stream();</div></pre></td></tr></table></figure><h4 id="数值流的构造"><a href="#数值流的构造" class="headerlink" title="数值流的构造"></a>数值流的构造</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntStream.of(new int[]&#123;1, 2, 3&#125;).forEach(System.out::println);</div><div class="line">IntStream.range(1, 3).forEach(System.out::println);</div><div class="line">IntStream.rangeClosed(1, 3).forEach(System.out::println);</div></pre></td></tr></table></figure><h4 id="流转换为其它数据结构"><a href="#流转换为其它数据结构" class="headerlink" title="流转换为其它数据结构"></a>流转换为其它数据结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 1. Array</div><div class="line">String[] strArray1 = stream.toArray(String[]::new);</div><div class="line">// 2. Collection</div><div class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</div><div class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::new));</div><div class="line">Set set1 = stream.collect(Collectors.toSet());</div><div class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::new));</div><div class="line">// 3. String</div><div class="line">String str = stream.collect(Collectors.joining()).toString();</div></pre></td></tr></table></figure><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><ul><li>Intermediate(中间操作): map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</li></ul><p>filter()：对元素进行过滤；<br>sorted()：对元素排序；<br>map()：元素的映射；<br>distinct()：去除重复元素；<br>subStream()：获取子 Stream 等。</p><ul><li>Terminal(终止操作)：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</li></ul><p>forEach()：对每个元素做处理；<br>toArray()：把元素导出到数组；<br>findFirst()：返回第一个匹配的元素；<br>anyMatch()：是否有匹配的元素等。</p><ul><li>Short-circuiting：anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li></ul><p>下面来看看流操作的具体Demo</p><ul><li><font color="red">map/flatMap:</font>该方法用于将每个元素映射到对应的结果上</li><li><font color="red">collector:</font>合并Stream的元素处理结果。它可以用于返回一个字符串列表</li></ul><p>Demo1:转换大写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; output = wordList.stream().</div><div class="line">map(String::toUpperCase).</div><div class="line">collect(Collectors.toList());</div></pre></td></tr></table></figure></p><p>Demo2:平方数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);</div><div class="line">List&lt;Integer&gt; squareNums = nums.stream().</div><div class="line">map(n -&gt; n * n).</div><div class="line">collect(Collectors.toList());</div></pre></td></tr></table></figure></p><p>Demo3:一对多<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</div><div class="line"> Arrays.asList(1),</div><div class="line"> Arrays.asList(2, 3),</div><div class="line"> Arrays.asList(4, 5, 6)</div><div class="line"> );</div><div class="line">Stream&lt;Integer&gt; outputStream = inputStream.</div><div class="line">flatMap((childList) -&gt; childList.stream());</div></pre></td></tr></table></figure></p><ul><li><font color="red">filter:</font> 该方法用于过滤满足条件的元素。</li></ul><p>Demo4:留下偶数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer[] sixNums = &#123;1, 2, 3, 4, 5, 6&#125;;</div><div class="line">Integer[] evens =</div><div class="line">Stream.of(sixNums).filter(n -&gt; n%2 == 0).toArray(Integer[]::new);</div></pre></td></tr></table></figure></p><ul><li><font color="red">foreach:</font> 该方法用于对Stream中的每个元素进行迭代操作<br>Demo5：迭代输出<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">roster.stream()</div><div class="line"> .filter(p -&gt; p.getGender() == Person.Sex.MALE)</div><div class="line"> .forEach(p -&gt; System.out.println(p.getName()));</div></pre></td></tr></table></figure></li></ul><blockquote><p>注意：forEach 是 terminal 操作，因此它执行后，Stream 的元素就被“消费”掉了，你无法对一个 Stream 进行两次 terminal 运算，相反，具有相似功能的 intermediate 操作 peek 可以达到上述目的。<br>同时，forEach 不能修改自己包含的本地变量值，也不能用 break/return 之类的关键字提前结束循环。</p></blockquote><p>Demo6：peek 对每个元素执行操作并返回一个新的 Stream<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>)</div><div class="line"> .filter(e -&gt; e.length() &gt; 3)</div><div class="line"> .peek(e -&gt; System.out.println(<span class="string">"Filtered value: "</span> + e))</div><div class="line"> .map(String::toUpperCase)</div><div class="line"> .peek(e -&gt; System.out.println(<span class="string">"Mapped value: "</span> + e))</div><div class="line"> .collect(Collectors.toList());</div></pre></td></tr></table></figure></p><ul><li><p><font color="red">limit:</font> 该方法用于减少Stream的大小。<br>Demo7:有限制地输出10个随机数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Random random = new Random();</div><div class="line">random.ints().<span class="built_in">limit</span>(10).forEach(System.out::println);</div></pre></td></tr></table></figure></li><li><p><font color="red">sorted:</font> 以有序的形式输出10个随机数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Random random = new Random();</div><div class="line">random.ints().<span class="built_in">limit</span>(10).sorted().forEach(System.out::println);</div></pre></td></tr></table></figure></li><li><p><font color="red">min/max/distinct:</font> 该方法用于最小、最大、不重复的值。<br>Demo8:找出最长一行的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BufferedReader br = new BufferedReader(new FileReader(<span class="string">"c:\\SUService.log"</span>));</div><div class="line">int longest = br.lines().</div><div class="line"> mapToInt(String::length).</div><div class="line"> max().</div><div class="line"> getAsInt();</div><div class="line">br.close();</div><div class="line">System.out.println(longest);</div></pre></td></tr></table></figure></li></ul><p>Demo9:找出全文的单词，转小写，并排序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; words = br.lines().</div><div class="line"> flatMap(line -&gt; Stream.of(line.split(<span class="string">" "</span>))).</div><div class="line"> filter(word -&gt; word.length() &gt; 0).</div><div class="line"> map(String::toLowerCase).</div><div class="line"> distinct().</div><div class="line"> sorted().</div><div class="line"> collect(Collectors.toList());</div><div class="line">br.close();</div><div class="line">System.out.println(words);</div></pre></td></tr></table></figure></p><ul><li><font color="red">match:</font><br>allMatch：Stream 中全部元素符合传入的 predicate，返回 true<br>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</li></ul><p>Demo10：使用match<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">List&lt;Person&gt; persons = new ArrayList();</div><div class="line">persons.add(new Person(1, <span class="string">"name"</span> + 1, 10));</div><div class="line">persons.add(new Person(2, <span class="string">"name"</span> + 2, 21));</div><div class="line">persons.add(new Person(3, <span class="string">"name"</span> + 3, 34));</div><div class="line">persons.add(new Person(4, <span class="string">"name"</span> + 4, 6));</div><div class="line">persons.add(new Person(5, <span class="string">"name"</span> + 5, 55));</div><div class="line">boolean isAllAdult = persons.stream().</div><div class="line"> allMatch(p -&gt; p.getAge() &gt; 18);</div><div class="line">System.out.println(<span class="string">"All are adult? "</span> + isAllAdult);</div><div class="line">boolean isThereAnyChild = persons.stream().</div><div class="line"> anyMatch(p -&gt; p.getAge() &lt; 12);</div><div class="line">System.out.println(<span class="string">"Any child? "</span> + isThereAnyChild);</div></pre></td></tr></table></figure></p><ul><li><font color="red">reduce:</font> 这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。</li></ul><p>Demo11:reduce使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 字符串连接，concat = <span class="string">"ABCD"</span></div><div class="line">String concat = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>).reduce(<span class="string">""</span>, String::concat); </div><div class="line">// 求最小值，minValue = -3.0</div><div class="line">double minValue = Stream.of(-1.5, 1.0, -3.0, -2.0).reduce(Double.MAX_VALUE, Double::min); </div><div class="line">// 求和，sumValue = 10, 有起始值</div><div class="line">int sumValue = Stream.of(1, 2, 3, 4).reduce(0, Integer::sum);</div><div class="line">// 求和，sumValue = 10, 无起始值</div><div class="line">sumValue = Stream.of(1, 2, 3, 4).reduce(Integer::sum).get();</div><div class="line">// 过滤，字符串连接，concat = <span class="string">"ace"</span></div><div class="line">concat = Stream.of(<span class="string">"a"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"F"</span>).</div><div class="line"> filter(x -&gt; x.compareTo(<span class="string">"Z"</span>) &gt; 0).</div><div class="line"> reduce(<span class="string">""</span>, String::concat);</div></pre></td></tr></table></figure></p><ul><li><font color="red">Stream.iterate:</font> iterate 跟 reduce 操作很像，接受一个种子值，和一个 UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。</li></ul><p>Demo12:等差数列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.iterate(0, n -&gt; n + 3).<span class="built_in">limit</span>(10). forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));.</div></pre></td></tr></table></figure></p><ul><li><font color="red">IntSummaryStatistics :</font>统计工具</li></ul><p>Demo12:计算Stream处理完成后的所有统计数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; numbers = Arrays.asList(2, 3, 3, 2, 5, 2, 7);</div><div class="line"></div><div class="line">IntSummaryStatistics stats = numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">System.out.println(<span class="string">"Lowest number in List : "</span> + stats.getMin());</div><div class="line">System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然下面的blog讲解的Streams API已经好多了，本文大部分也是参考了下面来进行编辑的，感觉好多API没有使用过，还是建议自己去官网上面学习。<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="external">Java 8 中的 Streams API 详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前几天看到一条较为劲爆的信息:Kotlin/Native支持IOS和Web开发。emmm，Kotlin要一统天下？还是先喝口水冷静一下吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Java-8新特性（三&quot;&gt;&lt;a href=&quot;#Java-
      
    
    </summary>
    
      <category term="Java 8" scheme="http://williamywh.github.io/categories/Java-8/"/>
    
    
      <category term="&lt;font size=6&gt;Java 8&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java-8-font/"/>
    
  </entry>
  
  <entry>
    <title>Java 8新特性（二）</title>
    <link href="http://williamywh.github.io/2017/11/03/J8-1/"/>
    <id>http://williamywh.github.io/2017/11/03/J8-1/</id>
    <published>2017-11-03T10:26:32.000Z</published>
    <updated>2017-11-04T12:45:25.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>农训之后便是一顿实验课、实验课、实验课……小编的内心是崩溃的……但是该更博文还是得更博文滴…</p></blockquote><h1 id="Java-8新特性-二"><a href="#Java-8新特性-二" class="headerlink" title="Java 8新特性(二)"></a>Java 8新特性(二)</h1><p>本章继续介绍J8特性，包括函数式接口，Optional类，默认方法三部分</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>Java 8有个概念–函数式接口（Functional Interfaces）。接口里面只有一个抽象方法，这个方法能直接在接口中运行，那这个接口称之为函数式编程。<br>在函数式接口前面一般添加注解@FunctionalInterface，JVM会自动判断。 </p><p>一般接口里面只有一个方法，并且前面有注解@FunctionalInterface，位于java.util.Funtion包中，一般就可以判断这是一个函数式接口了</p><p>下面列出几个常用的函数式接口：</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>Predicate</td><td>Represents a predicate (boolean-valued function) of one argument.</td></tr><tr><td>Consumer</td><td>Represents an operation that accepts a single input argument and returns no result. Unlike most other functional interfaces, Consumer is expected to operate via side-effects.</td></tr><tr><td>Supplier</td><td>Represents a supplier of results.There is no requirement that a new or distinct result be returned each time the supplier is invoked.</td></tr><tr><td>Function</td><td>Represents a function that accepts one argument and produces a result.</td></tr></tbody></table><p>emmm…小编开始看的时候也有点懵逼，那就一个一个解决，看他们API然后再看他们的Demo</p><h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>Method Summary</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>T</td><td>get()   Gets a result.</td></tr></tbody></table><p>Demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public interface Supplier&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Gets a result.</div><div class="line">     *</div><div class="line">     * @<span class="built_in">return</span> a result</div><div class="line">     */</div><div class="line">    T get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">static class PersonFactory &#123;</div><div class="line">        private Supplier&lt;Person&gt; supplier;</div><div class="line"></div><div class="line">        public PersonFactory(Supplier&lt;Person&gt; supplier) &#123;</div><div class="line">            this.supplier = supplier;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Person <span class="function"><span class="title">getPerson</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> supplier.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>通过Demo，结合description，在加上他的method，不难理解，supplier就是返回T对象的函数式接口。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>常用Method Summary</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>R</td><td>apply(T t)   Applies this function to the given argument.</td></tr></tbody></table><p>Demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class FunctionTest &#123;</div><div class="line">    static void modifyTheValue(int valueToBeOperated, Function&lt;Integer, Integer&gt; <span class="keyword">function</span>)&#123;</div><div class="line"></div><div class="line">        int newValue = function.apply(valueToBeOperated);</div><div class="line">        System.out.println(newValue);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">    int incr = 20;  int myNumber = 10;</div><div class="line">    modifyTheValue(myNumber, val-&gt; val + incr);</div><div class="line">    myNumber = 15;  modifyTheValue(myNumber, val-&gt; val * 10);</div><div class="line">    Function&lt;Integer,Integer&gt; test3 = num -&gt; num -100;</div><div class="line">    Function&lt;Integer,Integer&gt; test4 = num-&gt; <span class="string">"somestring"</span>.length() + num - 100;</div><div class="line">    modifyTheValue(myNumber, test3);</div><div class="line">    modifyTheValue(myNumber, test4);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果为：30  150  -85  -75</p><p>不难理解，function表示接受一个参数并产生结果的函数。它的适用场景应该是他们传入同一类型的参数，但是执行不同的方法可以使用这种函数式接口。<br>类似，一个类的printxxxx方法，可能根据传入一个相同的类对象，但是希望他print出不同的内容，可能是姓名、年龄、e-mail等等。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>Method Summary</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>void</td><td>accept(T t)   Performs this operation on the given argument.</td></tr><tr><td>default Consumer<t></t></td><td>andThen(Consumer&lt;? super T&gt; after)    Returns a composed Consumer that performs, in sequence, this operation followed by the after operation.</td></tr></tbody></table><p>Consumer接口和function接口非常相似,小编就修改function接口的Demo作为Consumer的Demo，方便对比理解:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ConsumerTest &#123;</div><div class="line">    static void modifyTheValue(int valueToBeOperated, Consumer&lt;Integer&gt; <span class="keyword">function</span>)&#123;</div><div class="line">        function.accept(valueToBeOperated);</div><div class="line">    &#125;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">    int incr = 20;  int myNumber = 10;</div><div class="line">    modifyTheValue(myNumber, val-&gt; System.out.println(val + incr));</div><div class="line">    myNumber = 15;  modifyTheValue(myNumber,val-&gt; System.out.println(val * 10));</div><div class="line">    Consumer&lt;Integer&gt; test3 = num -&gt; System.out.println(num -100);</div><div class="line">    Consumer&lt;Integer&gt; test4 = num-&gt; System.out.println(<span class="string">"somestring"</span>.length() + num - 100);</div><div class="line">    modifyTheValue(myNumber, test3);</div><div class="line">    modifyTheValue(myNumber, test4);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果依然是： 30  150  -85  -75</p><p>观察接口，对比，然后不难得出结论：Consumer表示接受单个输入参数并且不返回结果的操作。而Function是有结果的，执行完接口的方法后，将新结果返回给newValue，然后print。</p><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>常用Method Summary</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>boolean</td><td>test(T t)  Evaluates this predicate on the given argument.</td></tr><tr><td>static <t> Predicate<t></t></t></td><td>isEqual(Object targetRef)  Returns a predicate that tests if two arguments are equal according to Objects.equals(Object, Object).</td></tr></tbody></table><p>Demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class  PredicateTest&#123;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">    String name = <span class="string">""</span>;</div><div class="line">String name1 = <span class="string">"123"</span>;</div><div class="line">String name2 = <span class="string">"123456"</span>;</div><div class="line"></div><div class="line">System.out.println(judgeInput(name,input -&gt;  !input.isEmpty() &amp;&amp;  input.length() &lt;= 3 ));</div><div class="line">System.out.println(judgeInput(name1,input -&gt;  !input.isEmpty() &amp;&amp;  input.length() &lt;= 3 ));</div><div class="line">System.out.println(judgeInput(name2,input -&gt;  !input.isEmpty() &amp;&amp;  input.length() &lt;= 3 ));</div><div class="line"></div><div class="line">&#125;</div><div class="line">public static boolean judgeInput(String name,Predicate&lt;String&gt; <span class="keyword">function</span>) &#123;</div><div class="line"><span class="built_in">return</span> function.test(name);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果为：false  true  false</p><p>不难理解，Predicate是一个布尔值函数。Predicate接口里面还有好几个常用的函数，好像test是抽象的，有好一些函数是默认方法的，<br>在J8之前的版本中，小编记得，好像接口里面只能定义函数而不能实现函数，但是在J8，接口可以包含带有实现代码的方法，这些方法称为default方法，本节也会谈及默认方法的一些使用，但是！！！如今快到12点了，小编要睡晚觉了，明天继续写….晚安</p><h2 id="接口增强"><a href="#接口增强" class="headerlink" title="接口增强"></a>接口增强</h2><p>J8对接口做了一些改变，在书本上面是这样说的，抽象类不可以用于new创建抽象类对象。抽象类可以包含抽象方法，抽象方法只有定义而没有实现，由子类实现，还要注意到，抽象方法是非静态的。一个包含抽象方法的类必须声明为抽象类。<br>而接口只含常量和抽象方法，但是在J8中，允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可，这个特征又叫做扩展方法。</p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>Demo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public interface DefaultFunInterface &#123;</div><div class="line">default int <span class="function"><span class="title">count</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> 1;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">public class SubDefaultFunClass implements DefaultFunInterface &#123;</div><div class="line">public static void main(String[] args)&#123;</div><div class="line"> SubDefaultFunClass sub = new SubDefaultFunClass();</div><div class="line">sub.count();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Demo:<br>J8中，还允许在接口中定义静态的方法，无需创建实例直接调用即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public interface StaticFunInterface &#123;</div><div class="line">public static int find(int count)&#123;</div><div class="line"><span class="built_in">return</span> 1+count;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">public class TestStaticFun &#123;</div><div class="line">public static void main(String[] args)&#123;</div><div class="line">int count = 1;</div><div class="line">StaticFunInterface.fine(count);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>先来看看，官方的是怎么对这个API描述的：A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.<br>Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() (return a default value if value not present) and ifPresent() (execute a block of code if the value is present).</p><p>This is a value-based class; use of identity-sensitive operations (including reference equality (==), identity hash code, or synchronization) on instances of Optional may have unpredictable results and should be avoided.</p><p>大概就是说，Optional是一个容器对象，可以容纳null or not null的值，网上某些资料说它容纳not null对象其实是片面的，准确来说，应该是是Optional专注于处理可用或者不可用的值，而不是检查那些空值（null）。</p><p>部分Method Summary：</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>static <t> Optional<t></t></t></td><td>of(T value)  Returns an Optional with the specified present non-null value.</td></tr><tr><td>static <t> Optional<t></t></t></td><td>ofNullable(T value)  Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.</td></tr><tr><td>T</td><td>orElse(T other)  Return the value if present, otherwise return other.</td></tr><tr><td>T</td><td>orElseGet(Supplier&lt;? extends T&gt; other)  Return the value if present, otherwise invoke other and return the result of that invocation.</td></tr><tr><td><x extends="" throwable=""> T</x></td><td>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)  Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.</td></tr><tr><td>T</td><td>get()  If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.</td></tr><tr><td>boolean</td><td>isPresent()  Return true if there is a value present, otherwise false.</td></tr></tbody></table><p>太多方法了，大家可以等一下到下面链接到官网里面寻找，直接上Demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">public class OptionalDemo &#123;</div><div class="line">     </div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    //创建Optional实例，也可以通过方法返回值得到。</div><div class="line">    Optional&lt;String&gt; name = Optional.of(<span class="string">"Sanaulla"</span>);</div><div class="line"> </div><div class="line">    //创建没有值的Optional实例，例如值为<span class="string">'null'</span></div><div class="line">    Optional empty = Optional.ofNullable(null);</div><div class="line"> </div><div class="line">    //isPresent方法用来检查Optional实例是否有值。</div><div class="line">    <span class="keyword">if</span> (name.isPresent()) &#123;</div><div class="line">      //调用get()返回Optional值。</div><div class="line">      System.out.println(name.get());</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    try &#123;</div><div class="line">      //在Optional实例上调用get()抛出NoSuchElementException。</div><div class="line">      System.out.println(empty.get());</div><div class="line">    &#125; catch (NoSuchElementException ex) &#123;</div><div class="line">      System.out.println(ex.getMessage());</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    //ifPresent方法接受lambda表达式参数。</div><div class="line">    //如果Optional值不为空，lambda表达式会处理并在其上执行操作。</div><div class="line">    name.ifPresent((value) -&gt; &#123;</div><div class="line">      System.out.println(<span class="string">"The length of the value is: "</span> + value.length());</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    //如果有值orElse方法会返回Optional实例，否则返回传入的错误信息。</div><div class="line">    System.out.println(empty.orElse(<span class="string">"There is no value present!"</span>));</div><div class="line">    System.out.println(name.orElse(<span class="string">"There is some value!"</span>));</div><div class="line"> </div><div class="line">    //orElseGet与orElse类似，区别在于传入的默认值。</div><div class="line">    //orElseGet接受lambda表达式生成默认值。</div><div class="line">    System.out.println(empty.orElseGet(() -&gt; <span class="string">"Default Value"</span>));</div><div class="line">    System.out.println(name.orElseGet(() -&gt; <span class="string">"Default Value"</span>));</div><div class="line"> </div><div class="line">    try &#123;</div><div class="line">      //orElseThrow与orElse方法类似，区别在于返回值。</div><div class="line">      //orElseThrow抛出由传入的lambda表达式/方法生成异常。</div><div class="line">    empty.orElseThrow(ValueAbsentException::new);</div><div class="line">    &#125; catch (Throwable ex) &#123;</div><div class="line">      System.out.println(ex.getMessage());</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    //map方法通过传入的lambda表达式修改Optonal实例默认值。 </div><div class="line">    //lambda表达式返回值会包装为Optional实例。</div><div class="line">    Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());</div><div class="line">    System.out.println(upperName.orElse(<span class="string">"No value found"</span>));</div><div class="line"> </div><div class="line">    //flatMap与map（Funtion）非常相似，区别在于lambda表达式的返回值。</div><div class="line">    //map方法的lambda表达式返回值可以是任何类型，但是返回值会包装成Optional实例。</div><div class="line">    //但是flatMap方法的lambda返回值总是Optional类型。</div><div class="line">    upperName = name.flatMap((value) -&gt; Optional.of(value.toUpperCase()));</div><div class="line">    System.out.println(upperName.orElse(<span class="string">"No value found"</span>));</div><div class="line"> </div><div class="line">    //filter方法检查Optiona值是否满足给定条件。</div><div class="line">    //如果满足返回Optional实例值，否则返回空Optional。</div><div class="line">    Optional&lt;String&gt; longName = name.filter((value) -&gt; value.length() &gt; 6);</div><div class="line">    System.out.println(longName.orElse(<span class="string">"The name is less than 6 characters"</span>));</div><div class="line"> </div><div class="line">    //另一个示例，Optional值不满足给定条件。</div><div class="line">    Optional&lt;String&gt; anotherName = Optional.of(<span class="string">"Sana"</span>);</div><div class="line">    Optional&lt;String&gt; shortName = anotherName.filter((value) -&gt; value.length() &gt; 6);</div><div class="line">    System.out.println(shortName.orElse(<span class="string">"The name is less than 6 characters"</span>));</div><div class="line"> </div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">class ValueAbsentException extends Throwable &#123; </div><div class="line">  public <span class="function"><span class="title">ValueAbsentException</span></span>() &#123;</div><div class="line">    super();</div><div class="line">  </div><div class="line">  &#125; </div><div class="line">  public ValueAbsentException(String msg) &#123;</div><div class="line">    super(msg);</div><div class="line">  &#125; </div><div class="line">  @Override</div><div class="line">  public String <span class="function"><span class="title">getMessage</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> <span class="string">"No value present in the Optional instance!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>注：<a href="https://www.javacodegeeks.com/2013/09/deep-dive-into-optional-class-api-in-java-8.html" target="_blank" rel="external">Optional之Demo来源</a></p></blockquote><p>emmm，那Optional怎么转为List or Set集合呢?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class OptionalDemo2 &#123;</div><div class="line">    public static void main(String... args)&#123;</div><div class="line">Optional&lt;String&gt; str1 = Optional.of(<span class="string">"Test1"</span>); </div><div class="line">Optional&lt;String&gt; str2 = Optional.of(<span class="string">"Test2"</span>);</div><div class="line"></div><div class="line">List&lt;String&gt; list1 = toList(str1);</div><div class="line">System.out.println(list1);</div><div class="line">List&lt;String&gt; list2 = toList(str2);</div><div class="line">System.out.println(list2);</div><div class="line">&#125;</div><div class="line">public static &lt;String&gt; List&lt;String&gt; toList(Optional&lt;String&gt; option) &#123;</div><div class="line">    <span class="built_in">return</span> option.</div><div class="line">            map(Collections::singletonList).</div><div class="line">            orElse(Collections.emptyList());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下一章的内容–Stream（流式操作）将会更加方便将Optional转为List or Set。下次见。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="external">Java 8 API</a><br><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html#section4" target="_blank" rel="external">Java SE 8: Lambda Quick Start</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;农训之后便是一顿实验课、实验课、实验课……小编的内心是崩溃的……但是该更博文还是得更博文滴…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Java-8新特性-二&quot;&gt;&lt;a href=&quot;#Java-8新特性-二&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Java 8" scheme="http://williamywh.github.io/categories/Java-8/"/>
    
    
      <category term="&lt;font size=6&gt;Java 8&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java-8-font/"/>
    
  </entry>
  
  <entry>
    <title>Java 8新特性（一）</title>
    <link href="http://williamywh.github.io/2017/10/29/J8/"/>
    <id>http://williamywh.github.io/2017/10/29/J8/</id>
    <published>2017-10-29T15:44:57.000Z</published>
    <updated>2017-11-04T12:35:20.908Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小编农事训练了一周，咸鱼了一周，一直心心念念着我没有更博，这不，小编给你们带来了水析Java 8，Java 8这个专题分为4章，本章末给出学习J8（原谅我简称它）最好的学习资料—-官方文档</p></blockquote><h1 id="Java-8新特性（一）"><a href="#Java-8新特性（一）" class="headerlink" title="Java 8新特性（一）"></a>Java 8新特性（一）</h1><p>J8在2014年就发布了，J9如今也出了，更新的速度赶上坐飞机了，知乎上面有人调侃，还在研究J5、6的源码，甚至有大神调侃，用J8重构之前的项目，会出现摸不着头脑的bug，把JDK换成7居然不报错了。小编不管，就是要学习J8新特性，毕竟J8某些特性算得上Java里程碑式的了。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>J8通过Lambda表达式对函数式编程，函数式编程的最大特点就是能够将一个函数或者一段代码作为另外一个函数的参数。Lambda表达式可以说是J8最大的卖点了。拿来说说他的Syntax</p><ul><li>A comma-separated list of formal parameters enclosed in parentheses</li><li>The arrow token, -&gt;</li><li>A body, which consists of a single expression or a statement block.</li></ul><p>是不是觉得官方文档有点晦涩，其实语法就概括如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(parameter，parameter) -&gt; &#123;expression body&#125;</div></pre></td></tr></table></figure></p><p>在J8之前，匿名内部类，监听器和事件处理器的使用都显得很冗长，可读性很差，或许说的有点虚，举一个java fx的按钮监听的例子（小编的java fx菜得一笔qwq）<br>匿名内部类：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.addActionListener(new <span class="function"><span class="title">ActionListener</span></span>() &#123;</div><div class="line">@Override</div><div class="line">public void actionPerformed(ActionEvent e) &#123;</div><div class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>使用 Lambda 表达式后：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">button.addActionListener(</div><div class="line">(ActionEvent e)-&gt; </div><div class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>是不是觉得Lambda表达式相较于匿名内部类清爽很多，可读性更强了</p><p>废话不多说直接上一个使用多个形式参数的lambda表达式的示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Calculator &#123;</div><div class="line">      </div><div class="line">    interface IntegerMath &#123;</div><div class="line">        int operation(int a, int b);   </div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    public int operateBinary(int a, int b, IntegerMath op) &#123;</div><div class="line">        <span class="built_in">return</span> op.operation(a, b);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String... args) &#123;</div><div class="line">    </div><div class="line">        Calculator myApp = new Calculator();</div><div class="line">        IntegerMath addition = (a, b) -&gt; a + b;</div><div class="line">        IntegerMath subtraction = (a, b) -&gt; a - b;</div><div class="line">        IntegerMath multiplication = (int a,int b) -&gt; a * b;</div><div class="line">        IntegerMath division = (a,b) -&gt; a / b;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"40 + 2 = "</span> +</div><div class="line">            myApp.operateBinary(40, 2, addition));</div><div class="line">        System.out.println(<span class="string">"20 - 10 = "</span> +</div><div class="line">            myApp.operateBinary(20, 10, subtraction));</div><div class="line">        System.out.println(<span class="string">"20 * 10 = "</span> +</div><div class="line">                multiplication.operation(20, 10));</div><div class="line">        System.out.println(<span class="string">"20 / 10 = "</span> +</div><div class="line">        division.operation(20, 10));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行效果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">40 + 2 = 42</div><div class="line">20 - 10 = 10</div><div class="line">20 * 10 = 200</div><div class="line">20 / 10 = 2</div></pre></td></tr></table></figure></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>在J8中，方法也是对象能够被引用，方法引用的目的就是为了支持Lambda的缩写，让代码更加简洁可读。</p><h3 id="方法引用分类"><a href="#方法引用分类" class="headerlink" title="方法引用分类"></a>方法引用分类</h3><table><thead><tr><th>Kind</th><th>Example</th></tr></thead><tbody><tr><td>Reference to a static method</td><td>ContainingClass::staticMethodName</td></tr><tr><td>Reference to an instance method of a particular object</td><td>containingObject::instanceMethodName</td></tr><tr><td>Reference to an instance method of an arbitrary object of a particular type</td><td>ContainingType::methodName</td></tr><tr><td>Reference to a constructor</td><td>ClassName::new</td></tr></tbody></table><p>官方文档是不是看起来特别累，其实也就是下面4种：</p><ul><li>引用静态方法 </li><li>引用特定对象的实例方法</li><li>引用特定类型的任意对象的实例方法</li><li>引用构造函数</li></ul><p>具体语法如何，还是一样直接上代码：</p><ul><li><p>Reference to a static method</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person::compareByAge</div></pre></td></tr></table></figure></li><li><p>Reference to a constructor </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String::new 等价于 Lambda的() -&gt; new String()</div></pre></td></tr></table></figure></li><li><p>reference to an instance method of a particular object</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class ComparisonProvider &#123;</div><div class="line">    public int compareByName(Person a, Person b) &#123;</div><div class="line">        <span class="built_in">return</span> a.getName().compareTo(b.getName());</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    public int compareByAge(Person a, Person b) &#123;</div><div class="line">        <span class="built_in">return</span> a.getBirthday().compareTo(b.getBirthday());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ComparisonProvider myComparisonProvider = new ComparisonProvider();</div><div class="line">Arrays.sort(rosterAsArray, myComparisonProvider::compareByName);</div></pre></td></tr></table></figure></li><li><p>reference to an instance method of an arbitrary object of a particular type</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"Barbara"</span>, <span class="string">"James"</span>, <span class="string">"Mary"</span>, <span class="string">"John"</span>,</div><div class="line">    <span class="string">"Patricia"</span>, <span class="string">"Robert"</span>, <span class="string">"Michael"</span>, <span class="string">"Linda"</span> &#125;;</div><div class="line">Arrays.sort(stringArray, String::compareToIgnoreCase);</div></pre></td></tr></table></figure></li></ul><p>官方文档分别用几个小栗子来说明方法引用，小编又在其他blog中看到了一些比较完整的demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">public class MethodReference &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 方法引用::引用构造函数</div><div class="line">        PersonFactory factory = new PersonFactory(Person::new);</div><div class="line">    </div><div class="line">        List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</div><div class="line"></div><div class="line">        Person p1 = factory.getPerson();</div><div class="line">        p1.setName(<span class="string">"Kobe"</span>);</div><div class="line">        personList.add(p1);</div><div class="line">        Person p2 = factory.getPerson();</div><div class="line">        p2.setName(<span class="string">"James"</span>);</div><div class="line">        personList.add(p2);</div><div class="line">        Person p3 = factory.getPerson();</div><div class="line">        p3.setName(<span class="string">"Paul"</span>);</div><div class="line">        personList.add(p3);</div><div class="line"></div><div class="line">        Person[] persons1 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons1);</div><div class="line"></div><div class="line">        // 方法引用::引用静态方法</div><div class="line">        Arrays.sort(persons1, MethodReference::myCompare);</div><div class="line">        //Arrays.sort(persons1, (m,n) -&gt; MethodReference.myCompare(m, n));</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons1);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        Person[] persons2 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons2);</div><div class="line"></div><div class="line">        // 方法引用::用特定对象的实例方法</div><div class="line">        Arrays.sort(persons2, p1::compare);</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons2);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        Person[] persons3 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons3);</div><div class="line"></div><div class="line">        // 方法引用::引用特定类型的任意对象的实例方法</div><div class="line">        Arrays.sort(persons3, Person::compareTo);</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void printArray(Person[] persons) &#123;</div><div class="line">        <span class="keyword">for</span> (Person p : persons) &#123;</div><div class="line">            System.out.print(p.name + <span class="string">"  "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int myCompare(Person p1, Person p2) &#123;</div><div class="line">        <span class="built_in">return</span> p1.getName().compareTo(p2.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class Person &#123;</div><div class="line">        private String name;</div><div class="line"></div><div class="line">        public <span class="function"><span class="title">Person</span></span>() &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setName(String name) &#123;</div><div class="line">            this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int compare(Person p1, Person p2) &#123;</div><div class="line">            <span class="built_in">return</span> p1.getName().compareTo(p2.getName());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int compareTo(Person p) &#123;</div><div class="line">            <span class="built_in">return</span> this.getName().compareTo(p.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class PersonFactory &#123;</div><div class="line">        private Supplier&lt;Person&gt; supplier;</div><div class="line"></div><div class="line">        public PersonFactory(Supplier&lt;Person&gt; supplier) &#123;</div><div class="line">            this.supplier = supplier;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Person <span class="function"><span class="title">getPerson</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> supplier.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public interface Supplier&lt;T&gt; &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Gets a result.</div><div class="line">         *</div><div class="line">         * @<span class="built_in">return</span> a result</div><div class="line">         */</div><div class="line">        T get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>Demo出处：<a href="http://blog.csdn.net/kimylrong/article/details/47255123" target="_blank" rel="external">java8 - 方法引用(method referrance)</a></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/" target="_blank" rel="external">The Java™ Tutorials</a></p><p>下周是下半年第一次满课，J8（二）更新不知道啥时候罗，晚安qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小编农事训练了一周，咸鱼了一周，一直心心念念着我没有更博，这不，小编给你们带来了水析Java 8，Java 8这个专题分为4章，本章末给出学习J8（原谅我简称它）最好的学习资料—-官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Jav
      
    
    </summary>
    
      <category term="Java 8" scheme="http://williamywh.github.io/categories/Java-8/"/>
    
    
      <category term="&lt;font size=6&gt;Java 8&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java-8-font/"/>
    
  </entry>
  
  <entry>
    <title>实际开发过程中乱码解决</title>
    <link href="http://williamywh.github.io/2017/10/21/coding2/"/>
    <id>http://williamywh.github.io/2017/10/21/coding2/</id>
    <published>2017-10-21T01:29:34.000Z</published>
    <updated>2017-10-21T01:30:53.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-MVC开发过程中遇到的乱码解决"><a href="#Spring-MVC开发过程中遇到的乱码解决" class="headerlink" title="Spring MVC开发过程中遇到的乱码解决"></a>Spring MVC开发过程中遇到的乱码解决</h2><h3 id="Post乱码"><a href="#Post乱码" class="headerlink" title="Post乱码"></a>Post乱码</h3><p>在页面编码格式中设置为<strong>pageEncoding=”UTF-8”%</strong><br>并且表单的form的提交方式：<strong>method=”post”</strong></p><p>这时候在工程目录下的web.xml添加post乱码过滤器filter<br>在web.xml中加入（代码尽量往前靠）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</div><div class="line">&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">&lt;init-param&gt;</div><div class="line">&lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">&lt;param-value&gt;utf-8&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;filter-mapping&gt;</div><div class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</div><div class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p><p>以上可以解决post请求乱码问题</p><h3 id="get请求中文参数乱码"><a href="#get请求中文参数乱码" class="headerlink" title="get请求中文参数乱码"></a>get请求中文参数乱码</h3><h4 id="方法一：对参数进行重新编码"><a href="#方法一：对参数进行重新编码" class="headerlink" title="方法一：对参数进行重新编码"></a>方法一：对参数进行重新编码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String userName = new String(request.getParamter(<span class="string">"userName"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"utf-8"</span>)</div></pre></td></tr></table></figure><p>其中ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</p><p>不过，小编查资料得知，tomcat8以后默认编码格式是utf-8；7之前的都是iso8859-1，不管了，自己可以去tomcat下面验证一下。</p><h4 id="方法二：修改tomcat配置文件"><a href="#方法二：修改tomcat配置文件" class="headerlink" title="方法二：修改tomcat配置文件"></a>方法二：修改tomcat配置文件</h4><p>假如说tomcat8以后默认的编码格式是utf-8，那就是没问题的。<br>如果不是，修改tomcat下的conf/server.xml文件，添加编码与工程编码一致<br>找到下面代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span> connectionTimeout=<span class="string">"20000"</span> redirectPort=<span class="string">"8443"</span> /&gt;</div></pre></td></tr></table></figure></p><p>这段代码主要是Tomcat监听HTTP请求的端口号等信息<br>添加<strong>URIEncoding=”utf-8”</strong>后变成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8080"</span>  protocol=<span class="string">"HTTP/1.1"</span> connectionTimeout=<span class="string">"20000"</span> redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span> /&gt;</div></pre></td></tr></table></figure></p><h3 id="对于存入数据库后乱码问题"><a href="#对于存入数据库后乱码问题" class="headerlink" title="对于存入数据库后乱码问题"></a>对于存入数据库后乱码问题</h3><p>可以看一看数据库连接池的设置的字符集和数据库本身的编码格式，这里就不水了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面主要是小编自己开发过程遇到乱码后亲测有效的解决办法，如果说，解决不了，可以联系我，一起讨论学习qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-MVC开发过程中遇到的乱码解决&quot;&gt;&lt;a href=&quot;#Spring-MVC开发过程中遇到的乱码解决&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC开发过程中遇到的乱码解决&quot;&gt;&lt;/a&gt;Spring MVC开发过程中遇到的乱码
      
    
    </summary>
    
      <category term="乱码" scheme="http://williamywh.github.io/categories/%E4%B9%B1%E7%A0%81/"/>
    
    
      <category term="&lt;font size=6&gt;Java乱码&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java%E4%B9%B1%E7%A0%81-font/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java乱码</title>
    <link href="http://williamywh.github.io/2017/10/20/coding/"/>
    <id>http://williamywh.github.io/2017/10/20/coding/</id>
    <published>2017-10-20T10:42:46.000Z</published>
    <updated>2017-10-20T14:25:10.812Z</updated>
    
    <content type="html"><![CDATA[<p>编程初学者，可能在刚开发的时候，总会遇到一些‘神奇’的问题，比如字符乱码。本章就是小编水析Java编码的时候啦。</p><h2 id="编码小故事"><a href="#编码小故事" class="headerlink" title="编码小故事"></a>编码小故事</h2><p>计算机最先在美国开始投入使用，他们需要用一些bit组合来表示不同的状态，他们发现一个字节有8个bit能代表256种不同的状态，大家于是乎他这称为‘Ascii’编码。后来计算机在世界范围内流行起来，1个字节早已经不能满足全世界各种语言字符编码的要求了。但是这难不倒聪明的中国人，我们改装编码方式，用2个字节重新进行编码，这就是常说的‘全角’字符。于是乎，称这种方案为‘gb2312’，之后，发展GBK到gb18030，都是汉字编码的发展历程，统称‘双字节字符集’。<br>不难想象，各国都搞自己那一套编码方案，到头来就只有一个结果–大家一起来乱码。最后，一个ISO组织出来收拾烂摊子，重新搞一个支持全球字符的统一编码，称为‘unicode’。unicode统一规定，用16位表示所有字符，这就意味着Ascii的那些‘半角’字符也需要2个字节，导致浪费了一半的空间，这下，美国人可不乐意了，凭什么？！<br>直到了UTF-8的出现，它最大的特点就是它是一种变长的编码方式。这就意味这Ascii还是一个字节表示，但是utf-8一个汉字一般占3个字节，这下差不多皆大欢喜了。</p><h2 id="场景一：ISO-8859-1与UTF-8"><a href="#场景一：ISO-8859-1与UTF-8" class="headerlink" title="场景一：ISO-8859-1与UTF-8"></a>场景一：ISO-8859-1与UTF-8</h2><blockquote><p>注：ISO-8859-1编码是单字节编码，向下兼容ASCII，是ASCII的扩展。</p></blockquote><p>直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"编码"</span>;</div><div class="line">System.out.println(<span class="string">"初始化unicode字符串:"</span>+string1);</div><div class="line">byte[] byteList1 = string1.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">String string2 = new String(byteList1,<span class="string">"ISO-8859-1"</span>);</div><div class="line">System.out.println(<span class="string">"转成ISO-8859-1乱码:"</span>+string2);</div><div class="line">byte[] byteList2 = string2.getBytes(<span class="string">"ISO-8859-1"</span>);</div><div class="line">String string3 = new String(byteList2,<span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"字符恢复正常："</span>+string3);</div></pre></td></tr></table></figure></p><p>运行后在console中如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">初始化unicode字符串:编码</div><div class="line">转成ISO-8859-1乱码:ç¼ç</div><div class="line">字符恢复正常：编码</div></pre></td></tr></table></figure></p><p>先看一下字符：unicode -&gt; encode by utf-8 -&gt; decode by ISO-8859-1（乱码） -&gt; encode by ISO-8859-1 -&gt; decode by utf-8（正常）</p><h2 id="场景二：GBK与UTF-8"><a href="#场景二：GBK与UTF-8" class="headerlink" title="场景二：GBK与UTF-8"></a>场景二：GBK与UTF-8</h2><p>老套路直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"编码"</span>;</div><div class="line">System.out.println(<span class="string">"初始化unicode字符串:"</span>+string1);</div><div class="line">byte[] byteList1 = string1.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">String string2 = new String(byteList1,<span class="string">"gbk"</span>);</div><div class="line">System.out.println(<span class="string">"转成gbk乱码:"</span>+string2);</div><div class="line">byte[] byteList2 = string2.getBytes(<span class="string">"gbk"</span>);</div><div class="line">String string3 = new String(byteList2,<span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"字符恢复正常："</span>+string3);</div></pre></td></tr></table></figure></p><p>在console如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">初始化unicode字符串:编码</div><div class="line">转成gbk乱码:缂栫爜</div><div class="line">字符恢复正常：编码</div></pre></td></tr></table></figure></p><p>先看一下字符：unicode -&gt; encode by utf-8 -&gt; decode by gbk（乱码） -&gt; encode by gbk -&gt; decode by utf-8（正常）</p><p>emm,看起来似乎没什么大的问题，其实不就是不管中间编码，其实到最后转回来就ok了嘛。<br>但是，小编居然看到一篇blog说这其实是个误区，那就来证实一下啦。</p><h2 id="证实：修改原字符串"><a href="#证实：修改原字符串" class="headerlink" title="证实：修改原字符串"></a>证实：修改原字符串</h2><p>将上面的unicode字符串修改成：编码咯<br>ISO-8859-1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">字符恢复正常：编码咯</div></pre></td></tr></table></figure></p><p>gbk:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">字符恢复正常：编码�?</div></pre></td></tr></table></figure></p><h2 id="来个结论"><a href="#来个结论" class="headerlink" title="来个结论"></a>来个结论</h2><p>经过小编的大量测试，发现ISO-8859-1作为中间编码是安全的，而gbk作为中间编码是不安全的（偶数字符长安全，奇数不安全）</p><h3 id="why-为什么会出现这种神奇的现象？"><a href="#why-为什么会出现这种神奇的现象？" class="headerlink" title="why 为什么会出现这种神奇的现象？"></a>why 为什么会出现这种神奇的现象？</h3><p>想知道答案当然是看中间码的具体字节流啦</p><p>还是一样，简单直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = new StringBuffer();</div><div class="line"><span class="keyword">for</span> (byte b : byteArray) &#123;</div><div class="line">sb.append(Integer.toHexString(b &amp; 0xFF));</div><div class="line">   sb.append(<span class="string">" "</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>注：ava.lang.Integer.toHexString()方法返回的字符串表示的无符号整数参数所表示的值以十六进制以表示。在64位计算机中数字以64位格式存储，若byte（8位）数字，高几位能有随机性，只有低8位才是有效数字，所以 &amp; 上0xFF</p></blockquote><p>中间码为ISO-8859-1安全的没问题<br>然后看一下中间码为GBK的console：<br>字符串为偶数的时候：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">utf Byte：e7 bc 96 e7 a0 81</div><div class="line">gbk Byte：e7 bc 96 e7 a0 81</div></pre></td></tr></table></figure></p><p>字符串为奇数的时候：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">utf Byte：e7 bc 96 e7 a0 81 e5 92 af</div><div class="line">gbk Byte：e7 bc 96 e7 a0 81 e5 92 3f</div></pre></td></tr></table></figure></p><h3 id="看到这有木有恍然大悟呀"><a href="#看到这有木有恍然大悟呀" class="headerlink" title="看到这有木有恍然大悟呀"></a>看到这有木有恍然大悟呀</h3><p>blog开头就说了，utf-8一个汉字占3个byte，ISO-8859-1是单字节编码,gbk是双字节编码<br>所以ISO-8859-1都是这样的字节流：[e7] [bc] [96] [e7] [a0] [81] [e5] [92] [af]这个是安全的</p><p>而当GBK时，字符串为偶数时候，gbk的字节流是：[e7 bc] [96 e7] [a0 81]</p><p>当字符串是奇数时，gbk的字节流是：[e7 bc] [96 e7] [a0 81] [e5 92] af</p><p>gbk的字节流多出了af无法组合，于是用一个半角Ascii字符的 “？” 代替（3f刚好就是Ascii的‘？’）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>中间码不一定全是安全的，ISO-8859-1作为中间码是安全的，但是，utf-8或者gbk作为中间码其实都是不安全的。</p><p>附上一句：使用什么编码，就用什么解码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编程初学者，可能在刚开发的时候，总会遇到一些‘神奇’的问题，比如字符乱码。本章就是小编水析Java编码的时候啦。&lt;/p&gt;
&lt;h2 id=&quot;编码小故事&quot;&gt;&lt;a href=&quot;#编码小故事&quot; class=&quot;headerlink&quot; title=&quot;编码小故事&quot;&gt;&lt;/a&gt;编码小故事&lt;/
      
    
    </summary>
    
      <category term="乱码" scheme="http://williamywh.github.io/categories/%E4%B9%B1%E7%A0%81/"/>
    
    
      <category term="&lt;font size=6&gt;Java乱码&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java%E4%B9%B1%E7%A0%81-font/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统概念(一)</title>
    <link href="http://williamywh.github.io/2017/10/16/DSC1/"/>
    <id>http://williamywh.github.io/2017/10/16/DSC1/</id>
    <published>2017-10-16T03:55:34.000Z</published>
    <updated>2017-10-16T03:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：最近学校在教《Database System Concepts》这本书，又刚好在做这个博客，那就顺手将这个当做一个专题（其实小编的真实意图是做做笔记的qwq）</p></blockquote><h1 id="数据的完整性和约束条件"><a href="#数据的完整性和约束条件" class="headerlink" title="数据的完整性和约束条件"></a>数据的完整性和约束条件</h1><h2 id="一、数据完整性约束"><a href="#一、数据完整性约束" class="headerlink" title="一、数据完整性约束"></a>一、数据完整性约束</h2><p>  直白点说，一个稍微大点的project，数据库表的结构一般都不简单，所以建表以后需要有关表的文档，否则，很有可能出现因当前负责这个模块的人离开而后续的开发者接触到这坨表后的一脸懵逼。表的数据有一定得取值范围和约束条件，多表之间更是有一定得参考关系。其中我们可以通过定义约束条件来保证数据的完整性和一致性。数据的完整性又包括数据完整性和参照完整性，数据完整性定义表数据的约束条件，参照完整性定义数据之间的约束条件。数据完整性由主键(PRIMARY KEY)、非空(NOT NULL)、惟一(UNIQUE)和检查(CHECK)约束条件定义，参照完整性由外键(FOREIGN KEY)约束条件定义。</p><h2 id="二、表的5种约束"><a href="#二、表的5种约束" class="headerlink" title="二、表的5种约束"></a>二、表的5种约束</h2><ul><li>主键(PRIMARY KEY) </li><li>非空(NOT NULL) </li><li>唯一(UNIQUE) </li><li>检查(CHECK) </li><li>外键(FOREIGN KEY) </li></ul><p>这次主要讲讲外键：</p><p>指定表的一列或多列的组合作为外键(一列的称为列级，多列的称为表级)，外键参照指定的主键或惟一键。</p><p>两个表含有主键或惟一键的称为主表，定义外键的那张表称为子表，子表参照主表的数据（这就意味着子表的数据来源于主表，子表‘抄袭’主表，子表的数据在主表中一定存在，反之则不一定）</p><h2 id="三、外键约束的语法"><a href="#三、外键约束的语法" class="headerlink" title="三、外键约束的语法"></a>三、外键约束的语法</h2><blockquote><p>外键约束的语法如下：<br>第一种语法，如果子记录存在，则不允许删除主记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)</p><p>第二种语法，如果子记录存在，则删除主记录时，级联删除子记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)on delete cascade</p><p>第三种语法，如果子记录存在，则更新主记录时，级联更新子记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名2,…)on update cascade （oracle 9i 不支持）</p><p>第四种语法，如果子记录存在，则删除主记录时，将子记录置成空：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)on delete set null 其中的表名为要参照的表名。</p></blockquote><ul><li>注意：CONSTRAINT 关键字用来定义约束名，如果省略，则系统自动生成以 SYS_开头的唯一约束名。约束名的作用是当发生违反约束条件的操作时，系统会显示违反的约束条件名称，这样用户就可以了解到发生错误的原因。</li></ul><h2 id="四、约束的应用"><a href="#四、约束的应用" class="headerlink" title="四、约束的应用"></a>四、约束的应用</h2><h5 id="1、可以通过下面的代码来查看表的约束条件"><a href="#1、可以通过下面的代码来查看表的约束条件" class="headerlink" title="1、可以通过下面的代码来查看表的约束条件"></a>1、可以通过下面的代码来查看表的约束条件</h5>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select constraint_name, constraint_type, search_condition</div><div class="line">from user_constraints</div><div class="line"><span class="built_in">where</span> table_name=<span class="string">'your table_name'</span></div></pre></td></tr></table></figure><h5 id="2、其中CONSTRAINTS-TYPE-显示的约束类型为："><a href="#2、其中CONSTRAINTS-TYPE-显示的约束类型为：" class="headerlink" title="2、其中CONSTRAINTS_TYPE 显示的约束类型为："></a>2、其中CONSTRAINTS_TYPE 显示的约束类型为：</h5><ul><li>C：CHECK 约束。</li><li>P：PRIMARY KEY 约束。</li><li>U：UNIQUE 约束。</li><li>R：FOREIGN KEY 约束。</li></ul><h5 id="3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束"><a href="#3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束" class="headerlink" title="3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束"></a>3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束</h5><ul><li><p>使约束条件失效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 DISABLE CONSTRAINT 约束名;</div></pre></td></tr></table></figure></li><li><p>使约束条件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 ENABLE CONSTRAINT 约束名;</div></pre></td></tr></table></figure></li></ul><ul><li>注：使约束条件生效的时候必须使表中所有的元组符合约束条件，否则，会报ERROR *</li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本章主要是有关表的约束条件，具体请看上面（小编要睡午觉了，其实就是偷懒）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注：最近学校在教《Database System Concepts》这本书，又刚好在做这个博客，那就顺手将这个当做一个专题（其实小编的真实意图是做做笔记的qwq）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据的完整性和约束条件&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="数据库系统概念" scheme="http://williamywh.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    
    
      <category term="&lt;font size=6&gt;MySQL&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-MySQL-font/"/>
    
      <category term="&lt;font size=6&gt;Oracle&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Oracle-font/"/>
    
  </entry>
  
  <entry>
    <title>hello,my blog</title>
    <link href="http://williamywh.github.io/2017/10/12/hello-my-blog/"/>
    <id>http://williamywh.github.io/2017/10/12/hello-my-blog/</id>
    <published>2017-10-12T07:59:35.000Z</published>
    <updated>2017-10-13T05:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://mahua.jser.me/mahua-logo.jpg" alt="mahua"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在<a href="https://www.zhihu.com/explore" target="_blank" rel="external">知乎</a>上面随便浏览一些和编程相关的东西，然后发现一些非常有意思的现象，大牛们都喜欢动不动将他们的<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号show出来，emmm，还有他们的博客（有博客园、GitHub pages等等的），突然萌生一种想一边学一边写的想法，虽然本人小白一个，写得也不咋地，随便写写，笔耕不辍嘛。<br>对比完博客园后，发现基于<a href="https://github.com/" target="_blank" rel="external">GitHub</a>的博客简直是一股清流，Markdown是种轻量级的标记语言，语法很少很简单，这意味这什么？它注重的是文字编辑而不是语法，然后小白就可以愉快的写博客了呀(๑•̀ㅂ•́) ✧</p><h2 id="Hello-my-blog"><a href="#Hello-my-blog" class="headerlink" title="Hello,my blog"></a>Hello,my blog</h2><p>布衣经过3天的艰苦奋斗，不食不眠，终于将博客的主题配置，各种插件搭配安装好了，emmmm，这种感觉就像是刚入门编程这个大坑，打出<strong>Hello World</strong>时的那种激动，只不过如今是Hello,my blog（叹息）小小的希望，自己能够在繁忙的时间抽身出来写写博客（虽然内容不咋地），在未来日子里面真的可以说一声<strong>Hello</strong></p><h2 id="起航至何方"><a href="#起航至何方" class="headerlink" title="起航至何方"></a>起航至何方</h2><p>emmm讲道理，我建立这个博客更多的是想帮自己建立一个<strong>World</strong>，能够对他说一声<strong>Hello</strong>，假如说，你们在读完我的博客觉得没意思，取关的话，完全没问题的，毕竟技术牛的博客数都数不过来，况且写博更多的是记录自己，自己喜欢怎么改怎么写就怎么做嘛，又或者说，一万个假如，你们在我的博客里面看到一些未成看到或者已经快忘记的东西，它们帮你们在编程上面节省了时间，那这就是我最大的动力了，腾多点时间出来，远离代码，跑跑步，看看电影之类的，岂不是美滋滋？</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p><a href="http://williamywh.github.io/about/">作者就是个白衣</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://mahua.jser.me/mahua-logo.jpg&quot; alt=&quot;mahua&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在
      
    
    </summary>
    
      <category term="其他" scheme="http://williamywh.github.io/categories/other/"/>
    
    
      <category term="&lt;font size=5 color=red&gt;First&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-5-color-red-First-font/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://williamywh.github.io/2017/10/10/hello-world/"/>
    <id>http://williamywh.github.io/2017/10/10/hello-world/</id>
    <published>2017-10-10T01:41:40.703Z</published>
    <updated>2017-10-18T04:40:57.946Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="其他" scheme="http://williamywh.github.io/categories/other/"/>
    
    
      <category term="&lt;font size=5&gt;杂文&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-5-%E6%9D%82%E6%96%87-font/"/>
    
  </entry>
  
</feed>
