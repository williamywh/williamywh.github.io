<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wuliviki&#39;s world</title>
  
  <subtitle>chat with me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://williamywh.github.io/"/>
  <updated>2017-10-29T16:17:02.296Z</updated>
  <id>http://williamywh.github.io/</id>
  
  <author>
    <name>尹文辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 8新特性（一）</title>
    <link href="http://williamywh.github.io/2017/10/29/J8/"/>
    <id>http://williamywh.github.io/2017/10/29/J8/</id>
    <published>2017-10-29T15:44:57.000Z</published>
    <updated>2017-10-29T16:17:02.296Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小编农事训练了一周，咸鱼了一周，一直心心念念着我没有更博，这不，小编给你们带来了水析Java 8，Java 8这个专题分为4章，本章末给出学习J8（原谅我简称它）最好的学习资料—-官方文档</p></blockquote><h1 id="Java-8新特性（一）"><a href="#Java-8新特性（一）" class="headerlink" title="Java 8新特性（一）"></a>Java 8新特性（一）</h1><p>J8在2014年就发布了，J9如今也出了，更新的速度赶上坐飞机了，知乎上面有人调侃，还在研究J5、6的源码，甚至有大神调侃，用J8重构之前的项目，会出现摸不着头脑的bug，把JDK换成7居然不报错了。小编不管，就是要学习J8新特性，毕竟J8某些特性算得上Java里程碑式的了。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>J8通过Lambda表达式对函数式编程，函数式编程的最大特点就是能够将一个函数或者一段代码作为另外一个函数的参数。Lambda表达式可以说是J8最大的卖点了。拿来说说他的Syntax</p><ul><li>A comma-separated list of formal parameters enclosed in parentheses</li><li>The arrow token, -&gt;</li><li>A body, which consists of a single expression or a statement block.</li></ul><p>是不是觉得官方文档有点晦涩，其实语法就概括如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(parameter，parameter) -&gt; &#123;expression body&#125;</div></pre></td></tr></table></figure></p><p>在J8之前，匿名内部类，监听器和事件处理器的使用都显得很冗长，可读性很差，或许说的有点虚，举一个java fx的按钮监听的例子（小编的java fx菜得一笔qwq）<br>匿名内部类：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.addActionListener(new <span class="function"><span class="title">ActionListener</span></span>() &#123;</div><div class="line">@Override</div><div class="line">public void actionPerformed(ActionEvent e) &#123;</div><div class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>使用 Lambda 表达式后：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">button.addActionListener(</div><div class="line">(ActionEvent e)-&gt; </div><div class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p><p>是不是觉得Lambda表达式相较于匿名内部类清爽很多，可读性更强了</p><p>废话不多说直接上一个使用多个形式参数的lambda表达式的示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Calculator &#123;</div><div class="line">      </div><div class="line">    interface IntegerMath &#123;</div><div class="line">        int operation(int a, int b);   </div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    public int operateBinary(int a, int b, IntegerMath op) &#123;</div><div class="line">        <span class="built_in">return</span> op.operation(a, b);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String... args) &#123;</div><div class="line">    </div><div class="line">        Calculator myApp = new Calculator();</div><div class="line">        IntegerMath addition = (a, b) -&gt; a + b;</div><div class="line">        IntegerMath subtraction = (a, b) -&gt; a - b;</div><div class="line">        IntegerMath multiplication = (int a,int b) -&gt; a * b;</div><div class="line">        IntegerMath division = (a,b) -&gt; a / b;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"40 + 2 = "</span> +</div><div class="line">            myApp.operateBinary(40, 2, addition));</div><div class="line">        System.out.println(<span class="string">"20 - 10 = "</span> +</div><div class="line">            myApp.operateBinary(20, 10, subtraction));</div><div class="line">        System.out.println(<span class="string">"20 * 10 = "</span> +</div><div class="line">                multiplication.operation(20, 10));</div><div class="line">        System.out.println(<span class="string">"20 / 10 = "</span> +</div><div class="line">        division.operation(20, 10));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行效果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">40 + 2 = 42</div><div class="line">20 - 10 = 10</div><div class="line">20 * 10 = 200</div><div class="line">20 / 10 = 2</div></pre></td></tr></table></figure></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>在J8中，方法也是对象能够被引用，方法引用的目的就是为了支持Lambda的缩写，让代码更加简洁可读。</p><h3 id="方法引用分类"><a href="#方法引用分类" class="headerlink" title="方法引用分类"></a>方法引用分类</h3><table><thead><tr><th>Kind</th><th>Example</th></tr></thead><tbody><tr><td>Reference to a static method</td><td>ContainingClass::staticMethodName</td></tr><tr><td>Reference to an instance method of a particular object</td><td>containingObject::instanceMethodName</td></tr><tr><td>Reference to an instance method of an arbitrary object of a particular type</td><td>ContainingType::methodName</td></tr><tr><td>Reference to a constructor</td><td>ClassName::new</td></tr></tbody></table><p>官方文档是不是看起来特别累，其实也就是下面4种：</p><ul><li>引用静态方法 </li><li>引用特定对象的实例方法</li><li>引用特定类型的任意对象的实例方法</li><li>引用构造函数</li></ul><p>具体语法如何，还是一样直接上代码：</p><ul><li><p>Reference to a static method</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person::compareByAge</div></pre></td></tr></table></figure></li><li><p>Reference to a constructor </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String::new 等价于 Lambda的() -&gt; new String()</div></pre></td></tr></table></figure></li><li><p>reference to an instance method of a particular object</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class ComparisonProvider &#123;</div><div class="line">    public int compareByName(Person a, Person b) &#123;</div><div class="line">        <span class="built_in">return</span> a.getName().compareTo(b.getName());</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    public int compareByAge(Person a, Person b) &#123;</div><div class="line">        <span class="built_in">return</span> a.getBirthday().compareTo(b.getBirthday());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ComparisonProvider myComparisonProvider = new ComparisonProvider();</div><div class="line">Arrays.sort(rosterAsArray, myComparisonProvider::compareByName);</div></pre></td></tr></table></figure></li><li><p>reference to an instance method of an arbitrary object of a particular type</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] stringArray = &#123; <span class="string">"Barbara"</span>, <span class="string">"James"</span>, <span class="string">"Mary"</span>, <span class="string">"John"</span>,</div><div class="line">    <span class="string">"Patricia"</span>, <span class="string">"Robert"</span>, <span class="string">"Michael"</span>, <span class="string">"Linda"</span> &#125;;</div><div class="line">Arrays.sort(stringArray, String::compareToIgnoreCase);</div></pre></td></tr></table></figure></li></ul><p>官方文档分别用几个小栗子来说明方法引用，小编又在其他blog中看到了一些比较完整的demo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">public class MethodReference &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 方法引用::引用构造函数</div><div class="line">        PersonFactory factory = new PersonFactory(Person::new);</div><div class="line">    </div><div class="line">        List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();</div><div class="line"></div><div class="line">        Person p1 = factory.getPerson();</div><div class="line">        p1.setName(<span class="string">"Kobe"</span>);</div><div class="line">        personList.add(p1);</div><div class="line">        Person p2 = factory.getPerson();</div><div class="line">        p2.setName(<span class="string">"James"</span>);</div><div class="line">        personList.add(p2);</div><div class="line">        Person p3 = factory.getPerson();</div><div class="line">        p3.setName(<span class="string">"Paul"</span>);</div><div class="line">        personList.add(p3);</div><div class="line"></div><div class="line">        Person[] persons1 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons1);</div><div class="line"></div><div class="line">        // 方法引用::引用静态方法</div><div class="line">        Arrays.sort(persons1, MethodReference::myCompare);</div><div class="line">        //Arrays.sort(persons1, (m,n) -&gt; MethodReference.myCompare(m, n));</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons1);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        Person[] persons2 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons2);</div><div class="line"></div><div class="line">        // 方法引用::用特定对象的实例方法</div><div class="line">        Arrays.sort(persons2, p1::compare);</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons2);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        Person[] persons3 = personList.toArray(new Person[personList.size()]);</div><div class="line">        System.out.print(<span class="string">"排序前: "</span>);</div><div class="line">        printArray(persons3);</div><div class="line"></div><div class="line">        // 方法引用::引用特定类型的任意对象的实例方法</div><div class="line">        Arrays.sort(persons3, Person::compareTo);</div><div class="line">        System.out.print(<span class="string">"排序后: "</span>);</div><div class="line">        printArray(persons3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void printArray(Person[] persons) &#123;</div><div class="line">        <span class="keyword">for</span> (Person p : persons) &#123;</div><div class="line">            System.out.print(p.name + <span class="string">"  "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int myCompare(Person p1, Person p2) &#123;</div><div class="line">        <span class="built_in">return</span> p1.getName().compareTo(p2.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class Person &#123;</div><div class="line">        private String name;</div><div class="line"></div><div class="line">        public <span class="function"><span class="title">Person</span></span>() &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void setName(String name) &#123;</div><div class="line">            this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int compare(Person p1, Person p2) &#123;</div><div class="line">            <span class="built_in">return</span> p1.getName().compareTo(p2.getName());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int compareTo(Person p) &#123;</div><div class="line">            <span class="built_in">return</span> this.getName().compareTo(p.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static class PersonFactory &#123;</div><div class="line">        private Supplier&lt;Person&gt; supplier;</div><div class="line"></div><div class="line">        public PersonFactory(Supplier&lt;Person&gt; supplier) &#123;</div><div class="line">            this.supplier = supplier;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Person <span class="function"><span class="title">getPerson</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> supplier.get();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public interface Supplier&lt;T&gt; &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * Gets a result.</div><div class="line">         *</div><div class="line">         * @<span class="built_in">return</span> a result</div><div class="line">         */</div><div class="line">        T get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>Demo出处：<a href="http://blog.csdn.net/kimylrong/article/details/47255123" target="_blank" rel="external">java8 - 方法引用(method referrance)</a></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/" target="_blank" rel="external">The Java™ Tutorials</a></p><p>下周是下半年第一次满课，J8（二）更新不知道啥时候罗，晚安qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小编农事训练了一周，咸鱼了一周，一直心心念念着我没有更博，这不，小编给你们带来了水析Java 8，Java 8这个专题分为4章，本章末给出学习J8（原谅我简称它）最好的学习资料—-官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Jav
      
    
    </summary>
    
      <category term="Java 8" scheme="http://williamywh.github.io/categories/Java-8/"/>
    
    
      <category term="&lt;font size=6&gt;Java 8&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java-8-font/"/>
    
  </entry>
  
  <entry>
    <title>实际开发过程中乱码解决</title>
    <link href="http://williamywh.github.io/2017/10/21/coding2/"/>
    <id>http://williamywh.github.io/2017/10/21/coding2/</id>
    <published>2017-10-21T01:29:34.000Z</published>
    <updated>2017-10-21T01:30:53.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-MVC开发过程中遇到的乱码解决"><a href="#Spring-MVC开发过程中遇到的乱码解决" class="headerlink" title="Spring MVC开发过程中遇到的乱码解决"></a>Spring MVC开发过程中遇到的乱码解决</h2><h3 id="Post乱码"><a href="#Post乱码" class="headerlink" title="Post乱码"></a>Post乱码</h3><p>在页面编码格式中设置为<strong>pageEncoding=”UTF-8”%</strong><br>并且表单的form的提交方式：<strong>method=”post”</strong></p><p>这时候在工程目录下的web.xml添加post乱码过滤器filter<br>在web.xml中加入（代码尽量往前靠）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</div><div class="line">&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">&lt;init-param&gt;</div><div class="line">&lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">&lt;param-value&gt;utf-8&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;filter-mapping&gt;</div><div class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</div><div class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p><p>以上可以解决post请求乱码问题</p><h3 id="get请求中文参数乱码"><a href="#get请求中文参数乱码" class="headerlink" title="get请求中文参数乱码"></a>get请求中文参数乱码</h3><h4 id="方法一：对参数进行重新编码"><a href="#方法一：对参数进行重新编码" class="headerlink" title="方法一：对参数进行重新编码"></a>方法一：对参数进行重新编码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String userName = new String(request.getParamter(<span class="string">"userName"</span>).getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"utf-8"</span>)</div></pre></td></tr></table></figure><p>其中ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</p><p>不过，小编查资料得知，tomcat8以后默认编码格式是utf-8；7之前的都是iso8859-1，不管了，自己可以去tomcat下面验证一下。</p><h4 id="方法二：修改tomcat配置文件"><a href="#方法二：修改tomcat配置文件" class="headerlink" title="方法二：修改tomcat配置文件"></a>方法二：修改tomcat配置文件</h4><p>假如说tomcat8以后默认的编码格式是utf-8，那就是没问题的。<br>如果不是，修改tomcat下的conf/server.xml文件，添加编码与工程编码一致<br>找到下面代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span> connectionTimeout=<span class="string">"20000"</span> redirectPort=<span class="string">"8443"</span> /&gt;</div></pre></td></tr></table></figure></p><p>这段代码主要是Tomcat监听HTTP请求的端口号等信息<br>添加<strong>URIEncoding=”utf-8”</strong>后变成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8080"</span>  protocol=<span class="string">"HTTP/1.1"</span> connectionTimeout=<span class="string">"20000"</span> redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"UTF-8"</span> /&gt;</div></pre></td></tr></table></figure></p><h3 id="对于存入数据库后乱码问题"><a href="#对于存入数据库后乱码问题" class="headerlink" title="对于存入数据库后乱码问题"></a>对于存入数据库后乱码问题</h3><p>可以看一看数据库连接池的设置的字符集和数据库本身的编码格式，这里就不水了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面主要是小编自己开发过程遇到乱码后亲测有效的解决办法，如果说，解决不了，可以联系我，一起讨论学习qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-MVC开发过程中遇到的乱码解决&quot;&gt;&lt;a href=&quot;#Spring-MVC开发过程中遇到的乱码解决&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC开发过程中遇到的乱码解决&quot;&gt;&lt;/a&gt;Spring MVC开发过程中遇到的乱码
      
    
    </summary>
    
      <category term="乱码" scheme="http://williamywh.github.io/categories/%E4%B9%B1%E7%A0%81/"/>
    
    
      <category term="&lt;font size=6&gt;Java乱码&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java%E4%B9%B1%E7%A0%81-font/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java乱码</title>
    <link href="http://williamywh.github.io/2017/10/20/coding/"/>
    <id>http://williamywh.github.io/2017/10/20/coding/</id>
    <published>2017-10-20T10:42:46.000Z</published>
    <updated>2017-10-20T14:25:10.812Z</updated>
    
    <content type="html"><![CDATA[<p>编程初学者，可能在刚开发的时候，总会遇到一些‘神奇’的问题，比如字符乱码。本章就是小编水析Java编码的时候啦。</p><h2 id="编码小故事"><a href="#编码小故事" class="headerlink" title="编码小故事"></a>编码小故事</h2><p>计算机最先在美国开始投入使用，他们需要用一些bit组合来表示不同的状态，他们发现一个字节有8个bit能代表256种不同的状态，大家于是乎他这称为‘Ascii’编码。后来计算机在世界范围内流行起来，1个字节早已经不能满足全世界各种语言字符编码的要求了。但是这难不倒聪明的中国人，我们改装编码方式，用2个字节重新进行编码，这就是常说的‘全角’字符。于是乎，称这种方案为‘gb2312’，之后，发展GBK到gb18030，都是汉字编码的发展历程，统称‘双字节字符集’。<br>不难想象，各国都搞自己那一套编码方案，到头来就只有一个结果–大家一起来乱码。最后，一个ISO组织出来收拾烂摊子，重新搞一个支持全球字符的统一编码，称为‘unicode’。unicode统一规定，用16位表示所有字符，这就意味着Ascii的那些‘半角’字符也需要2个字节，导致浪费了一半的空间，这下，美国人可不乐意了，凭什么？！<br>直到了UTF-8的出现，它最大的特点就是它是一种变长的编码方式。这就意味这Ascii还是一个字节表示，但是utf-8一个汉字一般占3个字节，这下差不多皆大欢喜了。</p><h2 id="场景一：ISO-8859-1与UTF-8"><a href="#场景一：ISO-8859-1与UTF-8" class="headerlink" title="场景一：ISO-8859-1与UTF-8"></a>场景一：ISO-8859-1与UTF-8</h2><blockquote><p>注：ISO-8859-1编码是单字节编码，向下兼容ASCII，是ASCII的扩展。</p></blockquote><p>直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"编码"</span>;</div><div class="line">System.out.println(<span class="string">"初始化unicode字符串:"</span>+string1);</div><div class="line">byte[] byteList1 = string1.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">String string2 = new String(byteList1,<span class="string">"ISO-8859-1"</span>);</div><div class="line">System.out.println(<span class="string">"转成ISO-8859-1乱码:"</span>+string2);</div><div class="line">byte[] byteList2 = string2.getBytes(<span class="string">"ISO-8859-1"</span>);</div><div class="line">String string3 = new String(byteList2,<span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"字符恢复正常："</span>+string3);</div></pre></td></tr></table></figure></p><p>运行后在console中如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">初始化unicode字符串:编码</div><div class="line">转成ISO-8859-1乱码:ç¼ç</div><div class="line">字符恢复正常：编码</div></pre></td></tr></table></figure></p><p>先看一下字符：unicode -&gt; encode by utf-8 -&gt; decode by ISO-8859-1（乱码） -&gt; encode by ISO-8859-1 -&gt; decode by utf-8（正常）</p><h2 id="场景二：GBK与UTF-8"><a href="#场景二：GBK与UTF-8" class="headerlink" title="场景二：GBK与UTF-8"></a>场景二：GBK与UTF-8</h2><p>老套路直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String string1 = <span class="string">"编码"</span>;</div><div class="line">System.out.println(<span class="string">"初始化unicode字符串:"</span>+string1);</div><div class="line">byte[] byteList1 = string1.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">String string2 = new String(byteList1,<span class="string">"gbk"</span>);</div><div class="line">System.out.println(<span class="string">"转成gbk乱码:"</span>+string2);</div><div class="line">byte[] byteList2 = string2.getBytes(<span class="string">"gbk"</span>);</div><div class="line">String string3 = new String(byteList2,<span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"字符恢复正常："</span>+string3);</div></pre></td></tr></table></figure></p><p>在console如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">初始化unicode字符串:编码</div><div class="line">转成gbk乱码:缂栫爜</div><div class="line">字符恢复正常：编码</div></pre></td></tr></table></figure></p><p>先看一下字符：unicode -&gt; encode by utf-8 -&gt; decode by gbk（乱码） -&gt; encode by gbk -&gt; decode by utf-8（正常）</p><p>emm,看起来似乎没什么大的问题，其实不就是不管中间编码，其实到最后转回来就ok了嘛。<br>但是，小编居然看到一篇blog说这其实是个误区，那就来证实一下啦。</p><h2 id="证实：修改原字符串"><a href="#证实：修改原字符串" class="headerlink" title="证实：修改原字符串"></a>证实：修改原字符串</h2><p>将上面的unicode字符串修改成：编码咯<br>ISO-8859-1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">字符恢复正常：编码咯</div></pre></td></tr></table></figure></p><p>gbk:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">字符恢复正常：编码�?</div></pre></td></tr></table></figure></p><h2 id="来个结论"><a href="#来个结论" class="headerlink" title="来个结论"></a>来个结论</h2><p>经过小编的大量测试，发现ISO-8859-1作为中间编码是安全的，而gbk作为中间编码是不安全的（偶数字符长安全，奇数不安全）</p><h3 id="why-为什么会出现这种神奇的现象？"><a href="#why-为什么会出现这种神奇的现象？" class="headerlink" title="why 为什么会出现这种神奇的现象？"></a>why 为什么会出现这种神奇的现象？</h3><p>想知道答案当然是看中间码的具体字节流啦</p><p>还是一样，简单直接上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = new StringBuffer();</div><div class="line"><span class="keyword">for</span> (byte b : byteArray) &#123;</div><div class="line">sb.append(Integer.toHexString(b &amp; 0xFF));</div><div class="line">   sb.append(<span class="string">" "</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>注：ava.lang.Integer.toHexString()方法返回的字符串表示的无符号整数参数所表示的值以十六进制以表示。在64位计算机中数字以64位格式存储，若byte（8位）数字，高几位能有随机性，只有低8位才是有效数字，所以 &amp; 上0xFF</p></blockquote><p>中间码为ISO-8859-1安全的没问题<br>然后看一下中间码为GBK的console：<br>字符串为偶数的时候：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">utf Byte：e7 bc 96 e7 a0 81</div><div class="line">gbk Byte：e7 bc 96 e7 a0 81</div></pre></td></tr></table></figure></p><p>字符串为奇数的时候：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">utf Byte：e7 bc 96 e7 a0 81 e5 92 af</div><div class="line">gbk Byte：e7 bc 96 e7 a0 81 e5 92 3f</div></pre></td></tr></table></figure></p><h3 id="看到这有木有恍然大悟呀"><a href="#看到这有木有恍然大悟呀" class="headerlink" title="看到这有木有恍然大悟呀"></a>看到这有木有恍然大悟呀</h3><p>blog开头就说了，utf-8一个汉字占3个byte，ISO-8859-1是单字节编码,gbk是双字节编码<br>所以ISO-8859-1都是这样的字节流：[e7] [bc] [96] [e7] [a0] [81] [e5] [92] [af]这个是安全的</p><p>而当GBK时，字符串为偶数时候，gbk的字节流是：[e7 bc] [96 e7] [a0 81]</p><p>当字符串是奇数时，gbk的字节流是：[e7 bc] [96 e7] [a0 81] [e5 92] af</p><p>gbk的字节流多出了af无法组合，于是用一个半角Ascii字符的 “？” 代替（3f刚好就是Ascii的‘？’）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>中间码不一定全是安全的，ISO-8859-1作为中间码是安全的，但是，utf-8或者gbk作为中间码其实都是不安全的。</p><p>附上一句：使用什么编码，就用什么解码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编程初学者，可能在刚开发的时候，总会遇到一些‘神奇’的问题，比如字符乱码。本章就是小编水析Java编码的时候啦。&lt;/p&gt;
&lt;h2 id=&quot;编码小故事&quot;&gt;&lt;a href=&quot;#编码小故事&quot; class=&quot;headerlink&quot; title=&quot;编码小故事&quot;&gt;&lt;/a&gt;编码小故事&lt;/
      
    
    </summary>
    
      <category term="乱码" scheme="http://williamywh.github.io/categories/%E4%B9%B1%E7%A0%81/"/>
    
    
      <category term="&lt;font size=6&gt;Java乱码&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Java%E4%B9%B1%E7%A0%81-font/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统概念(一)</title>
    <link href="http://williamywh.github.io/2017/10/16/DSC1/"/>
    <id>http://williamywh.github.io/2017/10/16/DSC1/</id>
    <published>2017-10-16T03:55:34.000Z</published>
    <updated>2017-10-16T03:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：最近学校在教《Database System Concepts》这本书，又刚好在做这个博客，那就顺手将这个当做一个专题（其实小编的真实意图是做做笔记的qwq）</p></blockquote><h1 id="数据的完整性和约束条件"><a href="#数据的完整性和约束条件" class="headerlink" title="数据的完整性和约束条件"></a>数据的完整性和约束条件</h1><h2 id="一、数据完整性约束"><a href="#一、数据完整性约束" class="headerlink" title="一、数据完整性约束"></a>一、数据完整性约束</h2><p>  直白点说，一个稍微大点的project，数据库表的结构一般都不简单，所以建表以后需要有关表的文档，否则，很有可能出现因当前负责这个模块的人离开而后续的开发者接触到这坨表后的一脸懵逼。表的数据有一定得取值范围和约束条件，多表之间更是有一定得参考关系。其中我们可以通过定义约束条件来保证数据的完整性和一致性。数据的完整性又包括数据完整性和参照完整性，数据完整性定义表数据的约束条件，参照完整性定义数据之间的约束条件。数据完整性由主键(PRIMARY KEY)、非空(NOT NULL)、惟一(UNIQUE)和检查(CHECK)约束条件定义，参照完整性由外键(FOREIGN KEY)约束条件定义。</p><h2 id="二、表的5种约束"><a href="#二、表的5种约束" class="headerlink" title="二、表的5种约束"></a>二、表的5种约束</h2><ul><li>主键(PRIMARY KEY) </li><li>非空(NOT NULL) </li><li>唯一(UNIQUE) </li><li>检查(CHECK) </li><li>外键(FOREIGN KEY) </li></ul><p>这次主要讲讲外键：</p><p>指定表的一列或多列的组合作为外键(一列的称为列级，多列的称为表级)，外键参照指定的主键或惟一键。</p><p>两个表含有主键或惟一键的称为主表，定义外键的那张表称为子表，子表参照主表的数据（这就意味着子表的数据来源于主表，子表‘抄袭’主表，子表的数据在主表中一定存在，反之则不一定）</p><h2 id="三、外键约束的语法"><a href="#三、外键约束的语法" class="headerlink" title="三、外键约束的语法"></a>三、外键约束的语法</h2><blockquote><p>外键约束的语法如下：<br>第一种语法，如果子记录存在，则不允许删除主记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)</p><p>第二种语法，如果子记录存在，则删除主记录时，级联删除子记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)on delete cascade</p><p>第三种语法，如果子记录存在，则更新主记录时，级联更新子记录：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名2,…)on update cascade （oracle 9i 不支持）</p><p>第四种语法，如果子记录存在，则删除主记录时，将子记录置成空：<br>[CONSTRAINT 约束名] FOREIGN KEY(列名 1,列名 2,…)REFERENCES 表名(列名 1,列名 2,…)on delete set null 其中的表名为要参照的表名。</p></blockquote><ul><li>注意：CONSTRAINT 关键字用来定义约束名，如果省略，则系统自动生成以 SYS_开头的唯一约束名。约束名的作用是当发生违反约束条件的操作时，系统会显示违反的约束条件名称，这样用户就可以了解到发生错误的原因。</li></ul><h2 id="四、约束的应用"><a href="#四、约束的应用" class="headerlink" title="四、约束的应用"></a>四、约束的应用</h2><h5 id="1、可以通过下面的代码来查看表的约束条件"><a href="#1、可以通过下面的代码来查看表的约束条件" class="headerlink" title="1、可以通过下面的代码来查看表的约束条件"></a>1、可以通过下面的代码来查看表的约束条件</h5>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select constraint_name, constraint_type, search_condition</div><div class="line">from user_constraints</div><div class="line"><span class="built_in">where</span> table_name=<span class="string">'your table_name'</span></div></pre></td></tr></table></figure><h5 id="2、其中CONSTRAINTS-TYPE-显示的约束类型为："><a href="#2、其中CONSTRAINTS-TYPE-显示的约束类型为：" class="headerlink" title="2、其中CONSTRAINTS_TYPE 显示的约束类型为："></a>2、其中CONSTRAINTS_TYPE 显示的约束类型为：</h5><ul><li>C：CHECK 约束。</li><li>P：PRIMARY KEY 约束。</li><li>U：UNIQUE 约束。</li><li>R：FOREIGN KEY 约束。</li></ul><h5 id="3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束"><a href="#3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束" class="headerlink" title="3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束"></a>3、有时候在表格中插入或导出大量的数据的时候，可以暂时忽略约束，使数据最大化的流通，待操作完之后可以重新开启约束</h5><ul><li><p>使约束条件失效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 DISABLE CONSTRAINT 约束名;</div></pre></td></tr></table></figure></li><li><p>使约束条件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE 表名 ENABLE CONSTRAINT 约束名;</div></pre></td></tr></table></figure></li></ul><ul><li>注：使约束条件生效的时候必须使表中所有的元组符合约束条件，否则，会报ERROR *</li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本章主要是有关表的约束条件，具体请看上面（小编要睡午觉了，其实就是偷懒）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注：最近学校在教《Database System Concepts》这本书，又刚好在做这个博客，那就顺手将这个当做一个专题（其实小编的真实意图是做做笔记的qwq）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据的完整性和约束条件&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="数据库系统概念" scheme="http://williamywh.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    
    
      <category term="&lt;font size=6&gt;MySQL&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-MySQL-font/"/>
    
      <category term="&lt;font size=6&gt;Oracle&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-6-Oracle-font/"/>
    
  </entry>
  
  <entry>
    <title>hello,my blog</title>
    <link href="http://williamywh.github.io/2017/10/12/hello-my-blog/"/>
    <id>http://williamywh.github.io/2017/10/12/hello-my-blog/</id>
    <published>2017-10-12T07:59:35.000Z</published>
    <updated>2017-10-13T05:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://mahua.jser.me/mahua-logo.jpg" alt="mahua"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在<a href="https://www.zhihu.com/explore" target="_blank" rel="external">知乎</a>上面随便浏览一些和编程相关的东西，然后发现一些非常有意思的现象，大牛们都喜欢动不动将他们的<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号show出来，emmm，还有他们的博客（有博客园、GitHub pages等等的），突然萌生一种想一边学一边写的想法，虽然本人小白一个，写得也不咋地，随便写写，笔耕不辍嘛。<br>对比完博客园后，发现基于<a href="https://github.com/" target="_blank" rel="external">GitHub</a>的博客简直是一股清流，Markdown是种轻量级的标记语言，语法很少很简单，这意味这什么？它注重的是文字编辑而不是语法，然后小白就可以愉快的写博客了呀(๑•̀ㅂ•́) ✧</p><h2 id="Hello-my-blog"><a href="#Hello-my-blog" class="headerlink" title="Hello,my blog"></a>Hello,my blog</h2><p>布衣经过3天的艰苦奋斗，不食不眠，终于将博客的主题配置，各种插件搭配安装好了，emmmm，这种感觉就像是刚入门编程这个大坑，打出<strong>Hello World</strong>时的那种激动，只不过如今是Hello,my blog（叹息）小小的希望，自己能够在繁忙的时间抽身出来写写博客（虽然内容不咋地），在未来日子里面真的可以说一声<strong>Hello</strong></p><h2 id="起航至何方"><a href="#起航至何方" class="headerlink" title="起航至何方"></a>起航至何方</h2><p>emmm讲道理，我建立这个博客更多的是想帮自己建立一个<strong>World</strong>，能够对他说一声<strong>Hello</strong>，假如说，你们在读完我的博客觉得没意思，取关的话，完全没问题的，毕竟技术牛的博客数都数不过来，况且写博更多的是记录自己，自己喜欢怎么改怎么写就怎么做嘛，又或者说，一万个假如，你们在我的博客里面看到一些未成看到或者已经快忘记的东西，它们帮你们在编程上面节省了时间，那这就是我最大的动力了，腾多点时间出来，远离代码，跑跑步，看看电影之类的，岂不是美滋滋？</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p><a href="http://williamywh.github.io/about/">作者就是个白衣</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://mahua.jser.me/mahua-logo.jpg&quot; alt=&quot;mahua&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在
      
    
    </summary>
    
      <category term="其他" scheme="http://williamywh.github.io/categories/other/"/>
    
    
      <category term="&lt;font size=5 color=red&gt;First&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-5-color-red-First-font/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://williamywh.github.io/2017/10/10/hello-world/"/>
    <id>http://williamywh.github.io/2017/10/10/hello-world/</id>
    <published>2017-10-10T01:41:40.703Z</published>
    <updated>2017-10-18T04:40:57.946Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="其他" scheme="http://williamywh.github.io/categories/other/"/>
    
    
      <category term="&lt;font size=5&gt;杂文&lt;/font&gt;" scheme="http://williamywh.github.io/tags/font-size-5-%E6%9D%82%E6%96%87-font/"/>
    
  </entry>
  
</feed>
